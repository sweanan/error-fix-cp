apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-rabbitmq-v2
  namespace: infrastructure
  labels:
    grafana_dashboard: "1"
binaryData:
  dashboard-rabbitmq.json: |
    ewogICJhbm5vdGF0aW9ucyI6IHsKICAgICJsaXN0IjogWwogICAgICB7CiAgICAgICAgImJ1aWx0SW4iOiAxLAogICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgInR5cGUiOiAiZGF0YXNvdXJjZSIsCiAgICAgICAgICAidWlkIjogImdyYWZhbmEiCiAgICAgICAgfSwKICAgICAgICAiZW5hYmxlIjogdHJ1ZSwKICAgICAgICAiaGlkZSI6IHRydWUsCiAgICAgICAgImljb25Db2xvciI6ICJyZ2JhKDAsIDIxMSwgMjU1LCAxKSIsCiAgICAgICAgIm5hbWUiOiAiQW5ub3RhdGlvbnMgJiBBbGVydHMiLAogICAgICAgICJ0YXJnZXQiOiB7CiAgICAgICAgICAibGltaXQiOiAxMDAsCiAgICAgICAgICAibWF0Y2hBbnkiOiBmYWxzZSwKICAgICAgICAgICJ0YWdzIjogW10sCiAgICAgICAgICAidHlwZSI6ICJkYXNoYm9hcmQiCiAgICAgICAgfSwKICAgICAgICAidHlwZSI6ICJkYXNoYm9hcmQiCiAgICAgIH0KICAgIF0KICB9LAogICJkZXNjcmlwdGlvbiI6ICJBIG5ldyBSYWJiaXRNUSBNYW5hZ2VtZW50IE92ZXJ2aWV3IiwKICAiZWRpdGFibGUiOiB0cnVlLAogICJmaXNjYWxZZWFyU3RhcnRNb250aCI6IDAsCiAgImduZXRJZCI6IDEwOTkxLAogICJncmFwaFRvb2x0aXAiOiAxLAogICJpZCI6IDI4LAogICJsaW5rcyI6IFsKICAgIHsKICAgICAgImljb24iOiAiZG9jIiwKICAgICAgInRhZ3MiOiBbXSwKICAgICAgInRhcmdldEJsYW5rIjogdHJ1ZSwKICAgICAgInRpdGxlIjogIk1vbml0b3Jpbmcgd2l0aCBQcm9tZXRoZXVzICYgR3JhZmFuYSIsCiAgICAgICJ0b29sdGlwIjogIiIsCiAgICAgICJ0eXBlIjogImxpbmsiLAogICAgICAidXJsIjogImh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9wcm9tZXRoZXVzLmh0bWwiCiAgICB9CiAgXSwKICAibGl2ZU5vdyI6IGZhbHNlLAogICJwYW5lbHMiOiBbCiAgICB7CiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIiIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAiY29sb3IiOiB7CiAgICAgICAgICAgICJtb2RlIjogInRocmVzaG9sZHMiCiAgICAgICAgICB9LAogICAgICAgICAgIm1hcHBpbmdzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAibWF0Y2giOiAibnVsbCIsCiAgICAgICAgICAgICAgICAicmVzdWx0IjogewogICAgICAgICAgICAgICAgICAidGV4dCI6ICJOL0EiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSI6ICJzcGVjaWFsIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgInRocmVzaG9sZHMiOiB7CiAgICAgICAgICAgICJtb2RlIjogImFic29sdXRlIiwKICAgICAgICAgICAgInN0ZXBzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6ICIjMzc4NzJEIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6IG51bGwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6ICIjMUY2MEM0IiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6IDEwMDAwCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29sb3IiOiAiI0M0MTYyQSIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiAxMDAwMDAKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAidW5pdCI6ICJzaG9ydCIKICAgICAgICB9LAogICAgICAgICJvdmVycmlkZXMiOiBbXQogICAgICB9LAogICAgICAiaWQiOiA2NCwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJtYXhEYXRhUG9pbnRzIjogMTAwLAogICAgICAib3B0aW9ucyI6IHsKICAgICAgICAiY29sb3JNb2RlIjogImJhY2tncm91bmQiLAogICAgICAgICJncmFwaE1vZGUiOiAiYXJlYSIsCiAgICAgICAgImp1c3RpZnlNb2RlIjogImF1dG8iLAogICAgICAgICJvcmllbnRhdGlvbiI6ICJob3Jpem9udGFsIiwKICAgICAgICAicmVkdWNlT3B0aW9ucyI6IHsKICAgICAgICAgICJjYWxjcyI6IFsKICAgICAgICAgICAgImxhc3ROb3ROdWxsIgogICAgICAgICAgXSwKICAgICAgICAgICJmaWVsZHMiOiAiIiwKICAgICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInRleHRNb2RlIjogImF1dG8iCiAgICAgIH0sCiAgICAgICJwbHVnaW5WZXJzaW9uIjogIjkuMi4yIiwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAic3VtKHJhYmJpdG1xX3F1ZXVlX21lc3NhZ2VzX3JlYWR5ICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlcikgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaGlkZSI6IGZhbHNlLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbCI6ICIiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpdGxlIjogIlJlYWR5IG1lc3NhZ2VzIiwKICAgICAgInR5cGUiOiAic3RhdCIKICAgIH0sCiAgICB7CiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIiIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAiY29sb3IiOiB7CiAgICAgICAgICAgICJtb2RlIjogInRocmVzaG9sZHMiCiAgICAgICAgICB9LAogICAgICAgICAgIm1hcHBpbmdzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAibWF0Y2giOiAibnVsbCIsCiAgICAgICAgICAgICAgICAicmVzdWx0IjogewogICAgICAgICAgICAgICAgICAidGV4dCI6ICJOL0EiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSI6ICJzcGVjaWFsIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgInRocmVzaG9sZHMiOiB7CiAgICAgICAgICAgICJtb2RlIjogImFic29sdXRlIiwKICAgICAgICAgICAgInN0ZXBzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6ICIjQzQxNjJBIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6IG51bGwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6ICIjMUY2MEM0IiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6IC0xCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29sb3IiOiAiIzM3ODcyRCIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiA1MAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJ1bml0IjogInNob3J0IgogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMywKICAgICAgICAidyI6IDYsCiAgICAgICAgIngiOiA2LAogICAgICAgICJ5IjogMAogICAgICB9LAogICAgICAiaWQiOiA2MiwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJtYXhEYXRhUG9pbnRzIjogMTAwLAogICAgICAib3B0aW9ucyI6IHsKICAgICAgICAiY29sb3JNb2RlIjogImJhY2tncm91bmQiLAogICAgICAgICJncmFwaE1vZGUiOiAiYXJlYSIsCiAgICAgICAgImp1c3RpZnlNb2RlIjogImF1dG8iLAogICAgICAgICJvcmllbnRhdGlvbiI6ICJob3Jpem9udGFsIiwKICAgICAgICAicmVkdWNlT3B0aW9ucyI6IHsKICAgICAgICAgICJjYWxjcyI6IFsKICAgICAgICAgICAgImxhc3ROb3ROdWxsIgogICAgICAgICAgXSwKICAgICAgICAgICJmaWVsZHMiOiAiIiwKICAgICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInRleHRNb2RlIjogImF1dG8iCiAgICAgIH0sCiAgICAgICJwbHVnaW5WZXJzaW9uIjogIjkuMi4yIiwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAic3VtKHJhdGUocmFiYml0bXFfY2hhbm5lbF9tZXNzYWdlc19wdWJsaXNoZWRfdG90YWxbNjBzXSkgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnN0YW50IjogZmFsc2UsCiAgICAgICAgICAiaW50ZXJ2YWwiOiAiIiwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogIiIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aXRsZSI6ICJJbmNvbWluZyBtZXNzYWdlcyAvIHMiLAogICAgICAidHlwZSI6ICJzdGF0IgogICAgfSwKICAgIHsKICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICB9LAogICAgICAiZGVzY3JpcHRpb24iOiAiIiwKICAgICAgImZpZWxkQ29uZmlnIjogewogICAgICAgICJkZWZhdWx0cyI6IHsKICAgICAgICAgICJjb2xvciI6IHsKICAgICAgICAgICAgIm1vZGUiOiAidGhyZXNob2xkcyIKICAgICAgICAgIH0sCiAgICAgICAgICAibWFwcGluZ3MiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAib3B0aW9ucyI6IHsKICAgICAgICAgICAgICAgICJtYXRjaCI6ICJudWxsIiwKICAgICAgICAgICAgICAgICJyZXN1bHQiOiB7CiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIk4vQSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJ0eXBlIjogInNwZWNpYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAidGhyZXNob2xkcyI6IHsKICAgICAgICAgICAgIm1vZGUiOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAic3RlcHMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImNvbG9yIjogIiNDNDE2MkEiLAogICAgICAgICAgICAgICAgInZhbHVlIjogbnVsbAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImNvbG9yIjogIiMxRjYwQzQiLAogICAgICAgICAgICAgICAgInZhbHVlIjogMAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImNvbG9yIjogIiMzNzg3MkQiLAogICAgICAgICAgICAgICAgInZhbHVlIjogMTAKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAidW5pdCI6ICJub25lIgogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMywKICAgICAgICAidyI6IDQsCiAgICAgICAgIngiOiAxMiwKICAgICAgICAieSI6IDAKICAgICAgfSwKICAgICAgImlkIjogNjYsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibWF4RGF0YVBvaW50cyI6IDEwMCwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImNvbG9yTW9kZSI6ICJiYWNrZ3JvdW5kIiwKICAgICAgICAiZ3JhcGhNb2RlIjogImFyZWEiLAogICAgICAgICJqdXN0aWZ5TW9kZSI6ICJhdXRvIiwKICAgICAgICAib3JpZW50YXRpb24iOiAiaG9yaXpvbnRhbCIsCiAgICAgICAgInJlZHVjZU9wdGlvbnMiOiB7CiAgICAgICAgICAiY2FsY3MiOiBbCiAgICAgICAgICAgICJsYXN0Tm90TnVsbCIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmllbGRzIjogIiIsCiAgICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJ0ZXh0TW9kZSI6ICJhdXRvIgogICAgICB9LAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInN1bShyYWJiaXRtcV9jaGFubmVscyAqIG9uKGluc3RhbmNlKSBncm91cF9sZWZ0KHJhYmJpdG1xX2NsdXN0ZXIpIHJhYmJpdG1xX2lkZW50aXR5X2luZm97cmFiYml0bXFfY2x1c3Rlcj1cIiRyYWJiaXRtcV9jbHVzdGVyXCIsIG5hbWVzcGFjZT1cIiRuYW1lc3BhY2VcIn0pIC0gc3VtKHJhYmJpdG1xX2NoYW5uZWxfY29uc3VtZXJzICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlcikgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpdGxlIjogIlB1Ymxpc2hlcnMiLAogICAgICAidHlwZSI6ICJzdGF0IgogICAgfSwKICAgIHsKICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICB9LAogICAgICAiZGVzY3JpcHRpb24iOiAiIiwKICAgICAgImZpZWxkQ29uZmlnIjogewogICAgICAgICJkZWZhdWx0cyI6IHsKICAgICAgICAgICJjb2xvciI6IHsKICAgICAgICAgICAgIm1vZGUiOiAidGhyZXNob2xkcyIKICAgICAgICAgIH0sCiAgICAgICAgICAibWFwcGluZ3MiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAib3B0aW9ucyI6IHsKICAgICAgICAgICAgICAgICJtYXRjaCI6ICJudWxsIiwKICAgICAgICAgICAgICAgICJyZXN1bHQiOiB7CiAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIk4vQSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJ0eXBlIjogInNwZWNpYWwiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICAidGhyZXNob2xkcyI6IHsKICAgICAgICAgICAgIm1vZGUiOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAic3RlcHMiOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImNvbG9yIjogIiNDNDE2MkEiLAogICAgICAgICAgICAgICAgInZhbHVlIjogbnVsbAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImNvbG9yIjogIiMxRjYwQzQiLAogICAgICAgICAgICAgICAgInZhbHVlIjogMAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImNvbG9yIjogIiMzNzg3MkQiLAogICAgICAgICAgICAgICAgInZhbHVlIjogMTAKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAidW5pdCI6ICJub25lIgogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMywKICAgICAgICAidyI6IDQsCiAgICAgICAgIngiOiAxNiwKICAgICAgICAieSI6IDAKICAgICAgfSwKICAgICAgImlkIjogMzcsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibWF4RGF0YVBvaW50cyI6IDEwMCwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImNvbG9yTW9kZSI6ICJiYWNrZ3JvdW5kIiwKICAgICAgICAiZ3JhcGhNb2RlIjogImFyZWEiLAogICAgICAgICJqdXN0aWZ5TW9kZSI6ICJhdXRvIiwKICAgICAgICAib3JpZW50YXRpb24iOiAiaG9yaXpvbnRhbCIsCiAgICAgICAgInJlZHVjZU9wdGlvbnMiOiB7CiAgICAgICAgICAiY2FsY3MiOiBbCiAgICAgICAgICAgICJsYXN0Tm90TnVsbCIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmllbGRzIjogIiIsCiAgICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJ0ZXh0TW9kZSI6ICJhdXRvIgogICAgICB9LAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInN1bShyYWJiaXRtcV9jb25uZWN0aW9ucyAqIG9uKGluc3RhbmNlKSBncm91cF9sZWZ0KHJhYmJpdG1xX2NsdXN0ZXIpIHJhYmJpdG1xX2lkZW50aXR5X2luZm97cmFiYml0bXFfY2x1c3Rlcj1cIiRyYWJiaXRtcV9jbHVzdGVyXCIsIG5hbWVzcGFjZT1cIiRuYW1lc3BhY2VcIn0pIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbCI6ICIiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpdGxlIjogIkNvbm5lY3Rpb25zIiwKICAgICAgInR5cGUiOiAic3RhdCIKICAgIH0sCiAgICB7CiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIiIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAiY29sb3IiOiB7CiAgICAgICAgICAgICJtb2RlIjogInRocmVzaG9sZHMiCiAgICAgICAgICB9LAogICAgICAgICAgIm1hcHBpbmdzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAibWF0Y2giOiAibnVsbCIsCiAgICAgICAgICAgICAgICAicmVzdWx0IjogewogICAgICAgICAgICAgICAgICAidGV4dCI6ICJOL0EiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSI6ICJzcGVjaWFsIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgInRocmVzaG9sZHMiOiB7CiAgICAgICAgICAgICJtb2RlIjogImFic29sdXRlIiwKICAgICAgICAgICAgInN0ZXBzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6ICIjQzQxNjJBIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6IG51bGwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6ICIjMUY2MEM0IiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6IDAKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6ICIjMzc4NzJEIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6IDEwCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9LAogICAgICAgICAgInVuaXQiOiAibm9uZSIKICAgICAgICB9LAogICAgICAgICJvdmVycmlkZXMiOiBbXQogICAgICB9LAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDMsCiAgICAgICAgInciOiA0LAogICAgICAgICJ4IjogMjAsCiAgICAgICAgInkiOiAwCiAgICAgIH0sCiAgICAgICJpZCI6IDQwLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm1heERhdGFQb2ludHMiOiAxMDAsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJjb2xvck1vZGUiOiAiYmFja2dyb3VuZCIsCiAgICAgICAgImdyYXBoTW9kZSI6ICJhcmVhIiwKICAgICAgICAianVzdGlmeU1vZGUiOiAiYXV0byIsCiAgICAgICAgIm9yaWVudGF0aW9uIjogImhvcml6b250YWwiLAogICAgICAgICJyZWR1Y2VPcHRpb25zIjogewogICAgICAgICAgImNhbGNzIjogWwogICAgICAgICAgICAibGFzdE5vdE51bGwiCiAgICAgICAgICBdLAogICAgICAgICAgImZpZWxkcyI6ICIiLAogICAgICAgICAgInZhbHVlcyI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAidGV4dE1vZGUiOiAiYXV0byIKICAgICAgfSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZXhwciI6ICJzdW0ocmFiYml0bXFfcXVldWVzICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlcikgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpdGxlIjogIlF1ZXVlcyIsCiAgICAgICJ0eXBlIjogInN0YXQiCiAgICB9LAogICAgewogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImNvbG9yIjogewogICAgICAgICAgICAibW9kZSI6ICJ0aHJlc2hvbGRzIgogICAgICAgICAgfSwKICAgICAgICAgICJtYXBwaW5ncyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJvcHRpb25zIjogewogICAgICAgICAgICAgICAgIm1hdGNoIjogIm51bGwiLAogICAgICAgICAgICAgICAgInJlc3VsdCI6IHsKICAgICAgICAgICAgICAgICAgInRleHQiOiAiTi9BIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInR5cGUiOiAic3BlY2lhbCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJ0aHJlc2hvbGRzIjogewogICAgICAgICAgICAibW9kZSI6ICJhYnNvbHV0ZSIsCiAgICAgICAgICAgICJzdGVwcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29sb3IiOiAiIzM3ODcyRCIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiBudWxsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29sb3IiOiAiIzFGNjBDNCIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiAxMDAKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6ICIjQzQxNjJBIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6IDUwMAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJ1bml0IjogInNob3J0IgogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMywKICAgICAgICAidyI6IDYsCiAgICAgICAgIngiOiAwLAogICAgICAgICJ5IjogMwogICAgICB9LAogICAgICAiaWQiOiA2NSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJtYXhEYXRhUG9pbnRzIjogMTAwLAogICAgICAib3B0aW9ucyI6IHsKICAgICAgICAiY29sb3JNb2RlIjogImJhY2tncm91bmQiLAogICAgICAgICJncmFwaE1vZGUiOiAiYXJlYSIsCiAgICAgICAgImp1c3RpZnlNb2RlIjogImF1dG8iLAogICAgICAgICJvcmllbnRhdGlvbiI6ICJob3Jpem9udGFsIiwKICAgICAgICAicmVkdWNlT3B0aW9ucyI6IHsKICAgICAgICAgICJjYWxjcyI6IFsKICAgICAgICAgICAgImxhc3ROb3ROdWxsIgogICAgICAgICAgXSwKICAgICAgICAgICJmaWVsZHMiOiAiIiwKICAgICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInRleHRNb2RlIjogImF1dG8iCiAgICAgIH0sCiAgICAgICJwbHVnaW5WZXJzaW9uIjogIjkuMi4yIiwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAic3VtKHJhYmJpdG1xX3F1ZXVlX21lc3NhZ2VzX3VuYWNrZWQgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJoaWRlIjogZmFsc2UsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpdGxlIjogIlVuYWNrbm93bGVkZ2VkIG1lc3NhZ2VzIiwKICAgICAgInR5cGUiOiAic3RhdCIKICAgIH0sCiAgICB7CiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIiIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAiY29sb3IiOiB7CiAgICAgICAgICAgICJtb2RlIjogInRocmVzaG9sZHMiCiAgICAgICAgICB9LAogICAgICAgICAgIm1hcHBpbmdzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAibWF0Y2giOiAibnVsbCIsCiAgICAgICAgICAgICAgICAicmVzdWx0IjogewogICAgICAgICAgICAgICAgICAidGV4dCI6ICJOL0EiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSI6ICJzcGVjaWFsIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgInRocmVzaG9sZHMiOiB7CiAgICAgICAgICAgICJtb2RlIjogImFic29sdXRlIiwKICAgICAgICAgICAgInN0ZXBzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6ICIjQzQxNjJBIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6IG51bGwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6ICIjMUY2MEM0IiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6IC0xCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29sb3IiOiAiIzM3ODcyRCIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiA1MAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJ1bml0IjogInNob3J0IgogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMywKICAgICAgICAidyI6IDYsCiAgICAgICAgIngiOiA2LAogICAgICAgICJ5IjogMwogICAgICB9LAogICAgICAiaWQiOiA2MywKICAgICAgImxpbmtzIjogW10sCiAgICAgICJtYXhEYXRhUG9pbnRzIjogMTAwLAogICAgICAib3B0aW9ucyI6IHsKICAgICAgICAiY29sb3JNb2RlIjogImJhY2tncm91bmQiLAogICAgICAgICJncmFwaE1vZGUiOiAiYXJlYSIsCiAgICAgICAgImp1c3RpZnlNb2RlIjogImF1dG8iLAogICAgICAgICJvcmllbnRhdGlvbiI6ICJob3Jpem9udGFsIiwKICAgICAgICAicmVkdWNlT3B0aW9ucyI6IHsKICAgICAgICAgICJjYWxjcyI6IFsKICAgICAgICAgICAgImxhc3ROb3ROdWxsIgogICAgICAgICAgXSwKICAgICAgICAgICJmaWVsZHMiOiAiIiwKICAgICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInRleHRNb2RlIjogImF1dG8iCiAgICAgIH0sCiAgICAgICJwbHVnaW5WZXJzaW9uIjogIjkuMi4yIiwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAic3VtKHJhdGUocmFiYml0bXFfY2hhbm5lbF9tZXNzYWdlc19yZWRlbGl2ZXJlZF90b3RhbFs2MHNdKSAqIG9uKGluc3RhbmNlKSBncm91cF9sZWZ0KHJhYmJpdG1xX2NsdXN0ZXIpIHJhYmJpdG1xX2lkZW50aXR5X2luZm97cmFiYml0bXFfY2x1c3Rlcj1cIiRyYWJiaXRtcV9jbHVzdGVyXCIsIG5hbWVzcGFjZT1cIiRuYW1lc3BhY2VcIn0pICtcbnN1bShyYXRlKHJhYmJpdG1xX2NoYW5uZWxfbWVzc2FnZXNfZGVsaXZlcmVkX3RvdGFsWzYwc10pICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlcikgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkgK1xuc3VtKHJhdGUocmFiYml0bXFfY2hhbm5lbF9tZXNzYWdlc19kZWxpdmVyZWRfYWNrX3RvdGFsWzYwc10pICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlcikgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkgK1xuc3VtKHJhdGUocmFiYml0bXFfY2hhbm5lbF9nZXRfdG90YWxbNjBzXSkgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSArXG5zdW0ocmF0ZShyYWJiaXRtcV9jaGFubmVsX2dldF9hY2tfdG90YWxbNjBzXSkgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJoaWRlIjogZmFsc2UsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpdGxlIjogIk91dGdvaW5nIG1lc3NhZ2VzIC8gcyIsCiAgICAgICJ0eXBlIjogInN0YXQiCiAgICB9LAogICAgewogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImNvbG9yIjogewogICAgICAgICAgICAibW9kZSI6ICJ0aHJlc2hvbGRzIgogICAgICAgICAgfSwKICAgICAgICAgICJtYXBwaW5ncyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJvcHRpb25zIjogewogICAgICAgICAgICAgICAgIm1hdGNoIjogIm51bGwiLAogICAgICAgICAgICAgICAgInJlc3VsdCI6IHsKICAgICAgICAgICAgICAgICAgInRleHQiOiAiTi9BIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInR5cGUiOiAic3BlY2lhbCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJ0aHJlc2hvbGRzIjogewogICAgICAgICAgICAibW9kZSI6ICJhYnNvbHV0ZSIsCiAgICAgICAgICAgICJzdGVwcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29sb3IiOiAiI0M0MTYyQSIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiBudWxsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29sb3IiOiAiIzFGNjBDNCIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiAwCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29sb3IiOiAiIzM3ODcyRCIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiAxMAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJ1bml0IjogIm5vbmUiCiAgICAgICAgfSwKICAgICAgICAib3ZlcnJpZGVzIjogW10KICAgICAgfSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiAzLAogICAgICAgICJ3IjogNCwKICAgICAgICAieCI6IDEyLAogICAgICAgICJ5IjogMwogICAgICB9LAogICAgICAiaWQiOiA0MSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJtYXhEYXRhUG9pbnRzIjogMTAwLAogICAgICAib3B0aW9ucyI6IHsKICAgICAgICAiY29sb3JNb2RlIjogImJhY2tncm91bmQiLAogICAgICAgICJncmFwaE1vZGUiOiAiYXJlYSIsCiAgICAgICAgImp1c3RpZnlNb2RlIjogImF1dG8iLAogICAgICAgICJvcmllbnRhdGlvbiI6ICJob3Jpem9udGFsIiwKICAgICAgICAicmVkdWNlT3B0aW9ucyI6IHsKICAgICAgICAgICJjYWxjcyI6IFsKICAgICAgICAgICAgImxhc3ROb3ROdWxsIgogICAgICAgICAgXSwKICAgICAgICAgICJmaWVsZHMiOiAiIiwKICAgICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInRleHRNb2RlIjogImF1dG8iCiAgICAgIH0sCiAgICAgICJwbHVnaW5WZXJzaW9uIjogIjkuMi4yIiwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAic3VtKHJhYmJpdG1xX2NoYW5uZWxfY29uc3VtZXJzICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlcikgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpdGxlIjogIkNvbnN1bWVycyIsCiAgICAgICJ0eXBlIjogInN0YXQiCiAgICB9LAogICAgewogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImNvbG9yIjogewogICAgICAgICAgICAibW9kZSI6ICJ0aHJlc2hvbGRzIgogICAgICAgICAgfSwKICAgICAgICAgICJtYXBwaW5ncyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJvcHRpb25zIjogewogICAgICAgICAgICAgICAgIm1hdGNoIjogIm51bGwiLAogICAgICAgICAgICAgICAgInJlc3VsdCI6IHsKICAgICAgICAgICAgICAgICAgInRleHQiOiAiTi9BIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInR5cGUiOiAic3BlY2lhbCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgICJ0aHJlc2hvbGRzIjogewogICAgICAgICAgICAibW9kZSI6ICJhYnNvbHV0ZSIsCiAgICAgICAgICAgICJzdGVwcyI6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29sb3IiOiAiI0M0MTYyQSIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiBudWxsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29sb3IiOiAiIzFGNjBDNCIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiAwCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiY29sb3IiOiAiIzM3ODcyRCIsCiAgICAgICAgICAgICAgICAidmFsdWUiOiAxMAogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSwKICAgICAgICAgICJ1bml0IjogIm5vbmUiCiAgICAgICAgfSwKICAgICAgICAib3ZlcnJpZGVzIjogW10KICAgICAgfSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiAzLAogICAgICAgICJ3IjogNCwKICAgICAgICAieCI6IDE2LAogICAgICAgICJ5IjogMwogICAgICB9LAogICAgICAiaWQiOiAzOCwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJtYXhEYXRhUG9pbnRzIjogMTAwLAogICAgICAib3B0aW9ucyI6IHsKICAgICAgICAiY29sb3JNb2RlIjogImJhY2tncm91bmQiLAogICAgICAgICJncmFwaE1vZGUiOiAiYXJlYSIsCiAgICAgICAgImp1c3RpZnlNb2RlIjogImF1dG8iLAogICAgICAgICJvcmllbnRhdGlvbiI6ICJob3Jpem9udGFsIiwKICAgICAgICAicmVkdWNlT3B0aW9ucyI6IHsKICAgICAgICAgICJjYWxjcyI6IFsKICAgICAgICAgICAgImxhc3ROb3ROdWxsIgogICAgICAgICAgXSwKICAgICAgICAgICJmaWVsZHMiOiAiIiwKICAgICAgICAgICJ2YWx1ZXMiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInRleHRNb2RlIjogImF1dG8iCiAgICAgIH0sCiAgICAgICJwbHVnaW5WZXJzaW9uIjogIjkuMi4yIiwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAic3VtKHJhYmJpdG1xX2NoYW5uZWxzICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlcikgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpdGxlIjogIkNoYW5uZWxzIiwKICAgICAgInR5cGUiOiAic3RhdCIKICAgIH0sCiAgICB7CiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIiIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAiY29sb3IiOiB7CiAgICAgICAgICAgICJtb2RlIjogInRocmVzaG9sZHMiCiAgICAgICAgICB9LAogICAgICAgICAgIm1hcHBpbmdzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgICAgICAgICAibWF0Y2giOiAibnVsbCIsCiAgICAgICAgICAgICAgICAicmVzdWx0IjogewogICAgICAgICAgICAgICAgICAidGV4dCI6ICJOL0EiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidHlwZSI6ICJzcGVjaWFsIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgInRocmVzaG9sZHMiOiB7CiAgICAgICAgICAgICJtb2RlIjogImFic29sdXRlIiwKICAgICAgICAgICAgInN0ZXBzIjogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6ICIjMUY2MEM0IiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6IG51bGwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6ICIjMzc4NzJEIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6IDMKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJjb2xvciI6ICIjQzQxNjJBIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6IDgKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0sCiAgICAgICAgICAidW5pdCI6ICJub25lIgogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMywKICAgICAgICAidyI6IDQsCiAgICAgICAgIngiOiAyMCwKICAgICAgICAieSI6IDMKICAgICAgfSwKICAgICAgImlkIjogNjcsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibWF4RGF0YVBvaW50cyI6IDEwMCwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImNvbG9yTW9kZSI6ICJiYWNrZ3JvdW5kIiwKICAgICAgICAiZ3JhcGhNb2RlIjogImFyZWEiLAogICAgICAgICJqdXN0aWZ5TW9kZSI6ICJhdXRvIiwKICAgICAgICAib3JpZW50YXRpb24iOiAiaG9yaXpvbnRhbCIsCiAgICAgICAgInJlZHVjZU9wdGlvbnMiOiB7CiAgICAgICAgICAiY2FsY3MiOiBbCiAgICAgICAgICAgICJsYXN0Tm90TnVsbCIKICAgICAgICAgIF0sCiAgICAgICAgICAiZmllbGRzIjogIiIsCiAgICAgICAgICAidmFsdWVzIjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJ0ZXh0TW9kZSI6ICJhdXRvIgogICAgICB9LAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInN1bShyYWJiaXRtcV9idWlsZF9pbmZvICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlcikgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAiIiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpdGxlIjogIk5vZGVzIiwKICAgICAgInR5cGUiOiAic3RhdCIKICAgIH0sCiAgICB7CiAgICAgICJjb2xsYXBzZWQiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICB9LAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDEsCiAgICAgICAgInciOiAyNCwKICAgICAgICAieCI6IDAsCiAgICAgICAgInkiOiA2CiAgICAgIH0sCiAgICAgICJpZCI6IDQsCiAgICAgICJwYW5lbHMiOiBbXSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGl0bGUiOiAiTk9ERVMiLAogICAgICAidHlwZSI6ICJyb3ciCiAgICB9LAogICAgewogICAgICAiY29sdW1ucyI6IFtdLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJmb250U2l6ZSI6ICIxMDAlIiwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA0LAogICAgICAgICJ3IjogMjQsCiAgICAgICAgIngiOiAwLAogICAgICAgICJ5IjogNwogICAgICB9LAogICAgICAiaWQiOiA2OSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJzY3JvbGwiOiB0cnVlLAogICAgICAic2hvd0hlYWRlciI6IHRydWUsCiAgICAgICJzb3J0IjogewogICAgICAgICJjb2wiOiA4LAogICAgICAgICJkZXNjIjogZmFsc2UKICAgICAgfSwKICAgICAgInN0eWxlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiRXJsYW5nL09UUCIsCiAgICAgICAgICAiYWxpZ24iOiAiYXV0byIsCiAgICAgICAgICAiY29sb3JzIjogWwogICAgICAgICAgICAicmdiYSg1MCwgMTcyLCA0NSwgMC45NykiLAogICAgICAgICAgICAicmdiYSgyMzcsIDEyOSwgNDAsIDAuODkpIiwKICAgICAgICAgICAgInJnYmEoMjQ1LCA1NCwgNTQsIDAuOSkiCiAgICAgICAgICBdLAogICAgICAgICAgImRhdGVGb3JtYXQiOiAiWVlZWS1NTS1ERCBISDptbTpzcyIsCiAgICAgICAgICAibGluayI6IGZhbHNlLAogICAgICAgICAgIm1hcHBpbmdUeXBlIjogMSwKICAgICAgICAgICJwYXR0ZXJuIjogImVybGFuZ192ZXJzaW9uIiwKICAgICAgICAgICJ0aHJlc2hvbGRzIjogWwogICAgICAgICAgICAiIgogICAgICAgICAgXSwKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAidW5pdCI6ICJub25lIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIlJhYmJpdE1RIiwKICAgICAgICAgICJhbGlnbiI6ICJhdXRvIiwKICAgICAgICAgICJjb2xvcnMiOiBbCiAgICAgICAgICAgICJyZ2JhKDI0NSwgNTQsIDU0LCAwLjkpIiwKICAgICAgICAgICAgInJnYmEoMjM3LCAxMjksIDQwLCAwLjg5KSIsCiAgICAgICAgICAgICJyZ2JhKDUwLCAxNzIsIDQ1LCAwLjk3KSIKICAgICAgICAgIF0sCiAgICAgICAgICAiZGF0ZUZvcm1hdCI6ICJZWVlZLU1NLUREIEhIOm1tOnNzIiwKICAgICAgICAgICJkZWNpbWFscyI6IDIsCiAgICAgICAgICAibGluayI6IGZhbHNlLAogICAgICAgICAgIm1hcHBpbmdUeXBlIjogMSwKICAgICAgICAgICJwYXR0ZXJuIjogInJhYmJpdG1xX3ZlcnNpb24iLAogICAgICAgICAgInRocmVzaG9sZHMiOiBbCiAgICAgICAgICAgICIiCiAgICAgICAgICBdLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJ1bml0IjogIm5vbmUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiSG9zdCIsCiAgICAgICAgICAiYWxpZ24iOiAiYXV0byIsCiAgICAgICAgICAiY29sb3JzIjogWwogICAgICAgICAgICAicmdiYSgyNDUsIDU0LCA1NCwgMC45KSIsCiAgICAgICAgICAgICJyZ2JhKDIzNywgMTI5LCA0MCwgMC44OSkiLAogICAgICAgICAgICAicmdiYSg1MCwgMTcyLCA0NSwgMC45NykiCiAgICAgICAgICBdLAogICAgICAgICAgImRhdGVGb3JtYXQiOiAiWVlZWS1NTS1ERCBISDptbTpzcyIsCiAgICAgICAgICAiZGVjaW1hbHMiOiAyLAogICAgICAgICAgImxpbmsiOiBmYWxzZSwKICAgICAgICAgICJtYXBwaW5nVHlwZSI6IDEsCiAgICAgICAgICAicGF0dGVybiI6ICJpbnN0YW5jZSIsCiAgICAgICAgICAicHJlc2VydmVGb3JtYXQiOiBmYWxzZSwKICAgICAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgInVuaXQiOiAic2hvcnQiLAogICAgICAgICAgInZhbHVlTWFwcyI6IFtdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiTm9kZSBuYW1lIiwKICAgICAgICAgICJhbGlnbiI6ICJhdXRvIiwKICAgICAgICAgICJjb2xvcnMiOiBbCiAgICAgICAgICAgICJyZ2JhKDI0NSwgNTQsIDU0LCAwLjkpIiwKICAgICAgICAgICAgInJnYmEoMjM3LCAxMjksIDQwLCAwLjg5KSIsCiAgICAgICAgICAgICJyZ2JhKDUwLCAxNzIsIDQ1LCAwLjk3KSIKICAgICAgICAgIF0sCiAgICAgICAgICAiZGF0ZUZvcm1hdCI6ICJZWVlZLU1NLUREIEhIOm1tOnNzIiwKICAgICAgICAgICJkZWNpbWFscyI6IDIsCiAgICAgICAgICAibGluayI6IGZhbHNlLAogICAgICAgICAgIm1hcHBpbmdUeXBlIjogMSwKICAgICAgICAgICJwYXR0ZXJuIjogInJhYmJpdG1xX25vZGUiLAogICAgICAgICAgInRocmVzaG9sZHMiOiBbCiAgICAgICAgICAgICIiCiAgICAgICAgICBdLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJ1bml0IjogInNob3J0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIiIsCiAgICAgICAgICAiYWxpZ24iOiAiYXV0byIsCiAgICAgICAgICAiY29sb3JzIjogWwogICAgICAgICAgICAicmdiYSgyNDUsIDU0LCA1NCwgMC45KSIsCiAgICAgICAgICAgICJyZ2JhKDIzNywgMTI5LCA0MCwgMC44OSkiLAogICAgICAgICAgICAicmdiYSg1MCwgMTcyLCA0NSwgMC45NykiCiAgICAgICAgICBdLAogICAgICAgICAgImRhdGVGb3JtYXQiOiAiWVlZWS1NTS1ERCBISDptbTpzcyIsCiAgICAgICAgICAiZGVjaW1hbHMiOiAyLAogICAgICAgICAgIm1hcHBpbmdUeXBlIjogMSwKICAgICAgICAgICJwYXR0ZXJuIjogIlRpbWUiLAogICAgICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgICAgICJ0eXBlIjogImhpZGRlbiIsCiAgICAgICAgICAidW5pdCI6ICJzaG9ydCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIiLAogICAgICAgICAgImFsaWduIjogImF1dG8iLAogICAgICAgICAgImNvbG9ycyI6IFsKICAgICAgICAgICAgInJnYmEoMjQ1LCA1NCwgNTQsIDAuOSkiLAogICAgICAgICAgICAicmdiYSgyMzcsIDEyOSwgNDAsIDAuODkpIiwKICAgICAgICAgICAgInJnYmEoNTAsIDE3MiwgNDUsIDAuOTcpIgogICAgICAgICAgXSwKICAgICAgICAgICJkYXRlRm9ybWF0IjogIllZWVktTU0tREQgSEg6bW06c3MiLAogICAgICAgICAgImRlY2ltYWxzIjogMiwKICAgICAgICAgICJtYXBwaW5nVHlwZSI6IDEsCiAgICAgICAgICAicGF0dGVybiI6ICJWYWx1ZSIsCiAgICAgICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAgICAgInR5cGUiOiAiaGlkZGVuIiwKICAgICAgICAgICJ1bml0IjogInNob3J0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIiIsCiAgICAgICAgICAiYWxpZ24iOiAiYXV0byIsCiAgICAgICAgICAiY29sb3JzIjogWwogICAgICAgICAgICAicmdiYSgyNDUsIDU0LCA1NCwgMC45KSIsCiAgICAgICAgICAgICJyZ2JhKDIzNywgMTI5LCA0MCwgMC44OSkiLAogICAgICAgICAgICAicmdiYSg1MCwgMTcyLCA0NSwgMC45NykiCiAgICAgICAgICBdLAogICAgICAgICAgImRhdGVGb3JtYXQiOiAiWVlZWS1NTS1ERCBISDptbTpzcyIsCiAgICAgICAgICAiZGVjaW1hbHMiOiAyLAogICAgICAgICAgIm1hcHBpbmdUeXBlIjogMSwKICAgICAgICAgICJwYXR0ZXJuIjogImpvYiIsCiAgICAgICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAgICAgInR5cGUiOiAiaGlkZGVuIiwKICAgICAgICAgICJ1bml0IjogInNob3J0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIkNsdXN0ZXIiLAogICAgICAgICAgImFsaWduIjogImF1dG8iLAogICAgICAgICAgImNvbG9ycyI6IFsKICAgICAgICAgICAgInJnYmEoMjQ1LCA1NCwgNTQsIDAuOSkiLAogICAgICAgICAgICAicmdiYSgyMzcsIDEyOSwgNDAsIDAuODkpIiwKICAgICAgICAgICAgInJnYmEoNTAsIDE3MiwgNDUsIDAuOTcpIgogICAgICAgICAgXSwKICAgICAgICAgICJkYXRlRm9ybWF0IjogIllZWVktTU0tREQgSEg6bW06c3MiLAogICAgICAgICAgImRlY2ltYWxzIjogMiwKICAgICAgICAgICJtYXBwaW5nVHlwZSI6IDEsCiAgICAgICAgICAicGF0dGVybiI6ICJyYWJiaXRtcV9jbHVzdGVyIiwKICAgICAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICAgICAidHlwZSI6ICJoaWRkZW4iLAogICAgICAgICAgInVuaXQiOiAic2hvcnQiLAogICAgICAgICAgInZhbHVlTWFwcyI6IFtdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAicHJvbWV0aGV1cy5lcmwiLAogICAgICAgICAgImFsaWduIjogImF1dG8iLAogICAgICAgICAgImNvbG9ycyI6IFsKICAgICAgICAgICAgInJnYmEoMjQ1LCA1NCwgNTQsIDAuOSkiLAogICAgICAgICAgICAicmdiYSgyMzcsIDEyOSwgNDAsIDAuODkpIiwKICAgICAgICAgICAgInJnYmEoNTAsIDE3MiwgNDUsIDAuOTcpIgogICAgICAgICAgXSwKICAgICAgICAgICJkYXRlRm9ybWF0IjogIllZWVktTU0tREQgSEg6bW06c3MiLAogICAgICAgICAgImRlY2ltYWxzIjogMiwKICAgICAgICAgICJtYXBwaW5nVHlwZSI6IDEsCiAgICAgICAgICAicGF0dGVybiI6ICJwcm9tZXRoZXVzX2NsaWVudF92ZXJzaW9uIiwKICAgICAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgInVuaXQiOiAic2hvcnQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAicmFiYml0bXFfcHJvbWV0aGV1cyIsCiAgICAgICAgICAiYWxpZ24iOiAiYXV0byIsCiAgICAgICAgICAiY29sb3JzIjogWwogICAgICAgICAgICAicmdiYSgyNDUsIDU0LCA1NCwgMC45KSIsCiAgICAgICAgICAgICJyZ2JhKDIzNywgMTI5LCA0MCwgMC44OSkiLAogICAgICAgICAgICAicmdiYSg1MCwgMTcyLCA0NSwgMC45NykiCiAgICAgICAgICBdLAogICAgICAgICAgImRhdGVGb3JtYXQiOiAiWVlZWS1NTS1ERCBISDptbTpzcyIsCiAgICAgICAgICAiZGVjaW1hbHMiOiAyLAogICAgICAgICAgIm1hcHBpbmdUeXBlIjogMSwKICAgICAgICAgICJwYXR0ZXJuIjogInByb21ldGhldXNfcGx1Z2luX3ZlcnNpb24iLAogICAgICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAidW5pdCI6ICJzaG9ydCIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInJhYmJpdG1xX2J1aWxkX2luZm8gKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyLCByYWJiaXRtcV9ub2RlKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGFibGUiLAogICAgICAgICAgImluc3RhbnQiOiB0cnVlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRyYW5zZm9ybSI6ICJ0YWJsZSIsCiAgICAgICJ0eXBlIjogInRhYmxlLW9sZCIKICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIklmIHRoZSB2YWx1ZSBpcyB6ZXJvIG9yIGxlc3MsIHRoZSBtZW1vcnkgYWxhcm0gd2lsbCBiZSB0cmlnZ2VyZWQgYW5kIGFsbCBwdWJsaXNoaW5nIGNvbm5lY3Rpb25zIGFjcm9zcyBhbGwgY2x1c3RlciBub2RlcyB3aWxsIGJlIGJsb2NrZWQuXG5cblRoaXMgdmFsdWUgY2FuIHRlbXBvcmFyaWx5IGdvIG5lZ2F0aXZlIGJlY2F1c2UgdGhlIG1lbW9yeSBhbGFybSBpcyB0cmlnZ2VyZWQgd2l0aCBhIHNsaWdodCBkZWxheS5cblxuVGhlIGtlcm5lbCdzIHZpZXcgb2YgdGhlIGFtb3VudCBvZiBtZW1vcnkgdXNlZCBieSB0aGUgbm9kZSBjYW4gZGlmZmVyIGZyb20gd2hhdCB0aGUgbm9kZSBpdHNlbGYgY2FuIG9ic2VydmUuIFRoaXMgbWVhbnMgdGhhdCB0aGlzIHZhbHVlIGNhbiBiZSBuZWdhdGl2ZSBmb3IgYSBzdXN0YWluZWQgcGVyaW9kIG9mIHRpbWUuXG5cbkJ5IGRlZmF1bHQgbm9kZXMgdXNlIHJlc2lkZW50IHNldCBzaXplIChSU1MpIHRvIGNvbXB1dGUgaG93IG11Y2ggbWVtb3J5IHRoZXkgdXNlLiBUaGlzIHN0cmF0ZWd5IGNhbiBiZSBjaGFuZ2VkIChzZWUgdGhlIGd1aWRlcyBiZWxvdykuXG5cbiogW0FsYXJtc10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2FsYXJtcy5odG1sKVxuKiBbTWVtb3J5IEFsYXJtc10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL21lbW9yeS5odG1sKVxuKiBbUmVhc29uaW5nIEFib3V0IE1lbW9yeSBVc2VdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9tZW1vcnktdXNlLmh0bWwpXG4qIFtCbG9ja2VkIENvbm5lY3Rpb24gTm90aWZpY2F0aW9uc10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2Nvbm5lY3Rpb24tYmxvY2tlZC5odG1sKSIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAibGlua3MiOiBbXQogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJmaWxsIjogMCwKICAgICAgImZpbGxHcmFkaWVudCI6IDAsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogOCwKICAgICAgICAidyI6IDEyLAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDExCiAgICAgIH0sCiAgICAgICJoaWRkZW5TZXJpZXMiOiBmYWxzZSwKICAgICAgImlkIjogNywKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYWxpZ25Bc1RhYmxlIjogdHJ1ZSwKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiB0cnVlLAogICAgICAgICJtYXgiOiB0cnVlLAogICAgICAgICJtaW4iOiB0cnVlLAogICAgICAgICJzaG93IjogZmFsc2UsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IHRydWUKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImFsZXJ0VGhyZXNob2xkIjogdHJ1ZQogICAgICB9LAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJwb2ludHJhZGl1cyI6IDIsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM1NkE2NEIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzEoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRjJDQzBDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8yKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzMyNzREOSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNBMzUyQ0MiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzQoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkY3ODBBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj81KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzk2RDk4RCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkVFNTIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzcoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOEFCOEZGIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj84KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0NBOTVFNSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkIzNTciCiAgICAgICAgfQogICAgICBdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZXhwciI6ICIocmFiYml0bXFfcmVzaWRlbnRfbWVtb3J5X2xpbWl0X2J5dGVzICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlciwgcmFiYml0bXFfbm9kZSkgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkgLVxuKHJhYmJpdG1xX3Byb2Nlc3NfcmVzaWRlbnRfbWVtb3J5X2J5dGVzICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlciwgcmFiYml0bXFfbm9kZSkgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3tyYWJiaXRtcV9ub2RlfX0iLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiY29sb3JNb2RlIjogIndhcm5pbmciLAogICAgICAgICAgImZpbGwiOiB0cnVlLAogICAgICAgICAgImxpbmUiOiB0cnVlLAogICAgICAgICAgIm9wIjogImx0IiwKICAgICAgICAgICJ2YWx1ZSI6IDUzNjg3MDkxMiwKICAgICAgICAgICJ5YXhpcyI6ICJsZWZ0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImNvbG9yTW9kZSI6ICJjcml0aWNhbCIsCiAgICAgICAgICAiZmlsbCI6IHRydWUsCiAgICAgICAgICAibGluZSI6IHRydWUsCiAgICAgICAgICAib3AiOiAibHQiLAogICAgICAgICAgInZhbHVlIjogMCwKICAgICAgICAgICJ5YXhpcyI6ICJsZWZ0IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aXRsZSI6ICJNZW1vcnkgYXZhaWxhYmxlIGJlZm9yZSBwdWJsaXNoZXJzIGJsb2NrZWQiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDEsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImRlY2ltYWxzIjogMSwKICAgICAgICAgICJmb3JtYXQiOiAiYnl0ZXMiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoaXMgbWV0cmljIGlzIHJlcG9ydGVkIGZvciB0aGUgcGFydGl0aW9uIHdoZXJlIHRoZSBSYWJiaXRNUSBkYXRhIGRpcmVjdG9yeSBpcyBzdG9yZWQuXG5cbklmIHRoZSB2YWx1ZSBpcyB6ZXJvIG9yIGxlc3MsIHRoZSBkaXNrIGFsYXJtIHdpbGwgYmUgdHJpZ2dlcmVkIGFuZCBhbGwgcHVibGlzaGluZyBjb25uZWN0aW9ucyBhY3Jvc3MgYWxsIGNsdXN0ZXIgbm9kZXMgd2lsbCBiZSBibG9ja2VkLlxuXG5UaGlzIHZhbHVlIGNhbiB0ZW1wb3JhcmlseSBnbyBuZWdhdGl2ZSBiZWNhdXNlIHRoZSBmcmVlIGRpc2sgc3BhY2UgYWxhcm0gaXMgdHJpZ2dlcmVkIHdpdGggYSBzbGlnaHQgZGVsYXkuXG5cbiogW0FsYXJtc10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2FsYXJtcy5odG1sKVxuKiBbRGlzayBTcGFjZSBBbGFybXNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9kaXNrLWFsYXJtcy5odG1sKVxuKiBbRGlzayBTcGFjZV0oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL3Byb2R1Y3Rpb24tY2hlY2tsaXN0Lmh0bWwjcmVzb3VyY2UtbGltaXRzLWRpc2stc3BhY2UpXG4qIFtQZXJzaXN0ZW5jZSBDb25maWd1cmF0aW9uXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vcGVyc2lzdGVuY2UtY29uZi5odG1sKVxuKiBbQmxvY2tlZCBDb25uZWN0aW9uIE5vdGlmaWNhdGlvbnNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25uZWN0aW9uLWJsb2NrZWQuaHRtbCkiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImxpbmtzIjogW10KICAgICAgICB9LAogICAgICAgICJvdmVycmlkZXMiOiBbXQogICAgICB9LAogICAgICAiZmlsbCI6IDAsCiAgICAgICJmaWxsR3JhZGllbnQiOiAwLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDgsCiAgICAgICAgInciOiA4LAogICAgICAgICJ4IjogMTIsCiAgICAgICAgInkiOiAxMQogICAgICB9LAogICAgICAiaGlkZGVuU2VyaWVzIjogZmFsc2UsCiAgICAgICJpZCI6IDgsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImFsaWduQXNUYWJsZSI6IHRydWUsCiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogdHJ1ZSwKICAgICAgICAibWF4IjogdHJ1ZSwKICAgICAgICAibWluIjogdHJ1ZSwKICAgICAgICAic2hvdyI6IGZhbHNlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiB0cnVlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCIsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJhbGVydFRocmVzaG9sZCI6IHRydWUKICAgICAgfSwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAicG9pbnRyYWRpdXMiOiAyLAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzAoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjNTZBNjRCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8xKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0YyQ0MwQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiMzMjc0RDkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzMoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQTM1MkNDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj80KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGNzgwQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM5NkQ5OEQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzYoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZFRTUyIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj83KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzhBQjhGRiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNDQTk1RTUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzkoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZCMzU3IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IGZhbHNlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAicmFiYml0bXFfZGlza19zcGFjZV9hdmFpbGFibGVfYnl0ZXMgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyLCByYWJiaXRtcV9ub2RlKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInt7cmFiYml0bXFfbm9kZX19IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbCiAgICAgICAgewogICAgICAgICAgImNvbG9yTW9kZSI6ICJjcml0aWNhbCIsCiAgICAgICAgICAiZmlsbCI6IHRydWUsCiAgICAgICAgICAibGluZSI6IHRydWUsCiAgICAgICAgICAib3AiOiAibHQiLAogICAgICAgICAgInZhbHVlIjogMTA3Mzc0MTgyNCwKICAgICAgICAgICJ5YXhpcyI6ICJsZWZ0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImNvbG9yTW9kZSI6ICJ3YXJuaW5nIiwKICAgICAgICAgICJmaWxsIjogdHJ1ZSwKICAgICAgICAgICJsaW5lIjogdHJ1ZSwKICAgICAgICAgICJvcCI6ICJsdCIsCiAgICAgICAgICAidmFsdWUiOiA1MzY4NzA5MTIwLAogICAgICAgICAgInlheGlzIjogImxlZnQiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpdGxlIjogIkRpc2sgc3BhY2UgYXZhaWxhYmxlIGJlZm9yZSBwdWJsaXNoZXJzIGJsb2NrZWQiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDEsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImRlY2ltYWxzIjogMSwKICAgICAgICAgICJmb3JtYXQiOiAiYnl0ZXMiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIldoZW4gdGhpcyB2YWx1ZSByZWFjaGVzIHplcm8sIG5ldyBjb25uZWN0aW9ucyB3aWxsIG5vdCBiZSBhY2NlcHRlZCBhbmQgZGlzayB3cml0ZSBvcGVyYXRpb25zIG1heSBmYWlsLlxuXG5DbGllbnQgbGlicmFyaWVzLCBwZWVyIG5vZGVzIGFuZCBDTEkgdG9vbHMgd2lsbCBub3QgYmUgYWJsZSB0byBjb25uZWN0IHdoZW4gdGhlIG5vZGUgcnVucyBvdXQgb2YgYXZhaWxhYmxlIGZpbGUgZGVzY3JpcHRvcnMuXG5cbiogW09wZW4gRmlsZSBIYW5kbGVzIExpbWl0XShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vcHJvZHVjdGlvbi1jaGVja2xpc3QuaHRtbCNyZXNvdXJjZS1saW1pdHMtZmlsZS1oYW5kbGUtbGltaXQpIiwKICAgICAgImZpZWxkQ29uZmlnIjogewogICAgICAgICJkZWZhdWx0cyI6IHsKICAgICAgICAgICJsaW5rcyI6IFtdCiAgICAgICAgfSwKICAgICAgICAib3ZlcnJpZGVzIjogW10KICAgICAgfSwKICAgICAgImZpbGwiOiAwLAogICAgICAiZmlsbEdyYWRpZW50IjogMCwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA0LAogICAgICAgICJ3IjogNCwKICAgICAgICAieCI6IDIwLAogICAgICAgICJ5IjogMTEKICAgICAgfSwKICAgICAgImhpZGRlblNlcmllcyI6IGZhbHNlLAogICAgICAiaWQiOiAyLAogICAgICAibGVnZW5kIjogewogICAgICAgICJhbGlnbkFzVGFibGUiOiB0cnVlLAogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IHRydWUsCiAgICAgICAgIm1heCI6IHRydWUsCiAgICAgICAgIm1pbiI6IHRydWUsCiAgICAgICAgInJpZ2h0U2lkZSI6IGZhbHNlLAogICAgICAgICJzaG93IjogZmFsc2UsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IHRydWUKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImFsZXJ0VGhyZXNob2xkIjogdHJ1ZQogICAgICB9LAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJwb2ludHJhZGl1cyI6IDIsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM1NkE2NEIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzEoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRjJDQzBDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8yKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzMyNzREOSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNBMzUyQ0MiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzQoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkY3ODBBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj81KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzk2RDk4RCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkVFNTIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzcoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOEFCOEZGIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj84KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0NBOTVFNSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkIzNTciCiAgICAgICAgfQogICAgICBdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogZmFsc2UsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZXhwciI6ICIocmFiYml0bXFfcHJvY2Vzc19tYXhfZmRzICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlciwgcmFiYml0bXFfbm9kZSkgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkgLVxuKHJhYmJpdG1xX3Byb2Nlc3Nfb3Blbl9mZHMgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyLCByYWJiaXRtcV9ub2RlKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnN0YW50IjogZmFsc2UsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7e3JhYmJpdG1xX25vZGV9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogWwogICAgICAgIHsKICAgICAgICAgICJjb2xvck1vZGUiOiAiY3JpdGljYWwiLAogICAgICAgICAgImZpbGwiOiB0cnVlLAogICAgICAgICAgImxpbmUiOiB0cnVlLAogICAgICAgICAgIm9wIjogImx0IiwKICAgICAgICAgICJ2YWx1ZSI6IDUwMCwKICAgICAgICAgICJ5YXhpcyI6ICJsZWZ0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImNvbG9yTW9kZSI6ICJ3YXJuaW5nIiwKICAgICAgICAgICJmaWxsIjogdHJ1ZSwKICAgICAgICAgICJsaW5lIjogdHJ1ZSwKICAgICAgICAgICJvcCI6ICJsdCIsCiAgICAgICAgICAidmFsdWUiOiAxMDAwLAogICAgICAgICAgInlheGlzIjogImxlZnQiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpdGxlIjogIkZpbGUgZGVzY3JpcHRvcnMgYXZhaWxhYmxlIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAxLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJkZWNpbWFscyI6IC0xLAogICAgICAgICAgImZvcm1hdCI6ICJub25lIiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIldoZW4gdGhpcyB2YWx1ZSByZWFjaGVzIHplcm8sIG5ldyBjb25uZWN0aW9ucyB3aWxsIG5vdCBiZSBhY2NlcHRlZC5cblxuQ2xpZW50IGxpYnJhcmllcywgcGVlciBub2RlcyBhbmQgQ0xJIHRvb2xzIHdpbGwgbm90IGJlIGFibGUgdG8gY29ubmVjdCB3aGVuIHRoZSBub2RlIHJ1bnMgb3V0IG9mIGF2YWlsYWJsZSBmaWxlIGRlc2NyaXB0b3JzLlxuXG4qIFtOZXR3b3JraW5nIGFuZCBSYWJiaXRNUV0oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL25ldHdvcmtpbmcuaHRtbCkiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImxpbmtzIjogW10KICAgICAgICB9LAogICAgICAgICJvdmVycmlkZXMiOiBbXQogICAgICB9LAogICAgICAiZmlsbCI6IDAsCiAgICAgICJmaWxsR3JhZGllbnQiOiAwLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDQsCiAgICAgICAgInciOiA0LAogICAgICAgICJ4IjogMjAsCiAgICAgICAgInkiOiAxNQogICAgICB9LAogICAgICAiaGlkZGVuU2VyaWVzIjogZmFsc2UsCiAgICAgICJpZCI6IDUsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImFsaWduQXNUYWJsZSI6IHRydWUsCiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogdHJ1ZSwKICAgICAgICAibWF4IjogdHJ1ZSwKICAgICAgICAibWluIjogdHJ1ZSwKICAgICAgICAic2hvdyI6IGZhbHNlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiB0cnVlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCIsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJhbGVydFRocmVzaG9sZCI6IHRydWUKICAgICAgfSwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAicG9pbnRyYWRpdXMiOiAyLAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzAoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjNTZBNjRCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8xKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0YyQ0MwQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiMzMjc0RDkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzMoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQTM1MkNDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj80KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGNzgwQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM5NkQ5OEQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzYoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZFRTUyIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj83KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzhBQjhGRiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNDQTk1RTUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzkoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZCMzU3IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IGZhbHNlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAiKHJhYmJpdG1xX3Byb2Nlc3NfbWF4X3RjcF9zb2NrZXRzICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlciwgcmFiYml0bXFfbm9kZSkgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkgLVxuKHJhYmJpdG1xX3Byb2Nlc3Nfb3Blbl90Y3Bfc29ja2V0cyAqIG9uKGluc3RhbmNlKSBncm91cF9sZWZ0KHJhYmJpdG1xX2NsdXN0ZXIsIHJhYmJpdG1xX25vZGUpIHJhYmJpdG1xX2lkZW50aXR5X2luZm97cmFiYml0bXFfY2x1c3Rlcj1cIiRyYWJiaXRtcV9jbHVzdGVyXCIsIG5hbWVzcGFjZT1cIiRuYW1lc3BhY2VcIn0pIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInt7cmFiYml0bXFfbm9kZX19IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbCiAgICAgICAgewogICAgICAgICAgImNvbG9yTW9kZSI6ICJjcml0aWNhbCIsCiAgICAgICAgICAiZmlsbCI6IHRydWUsCiAgICAgICAgICAibGluZSI6IHRydWUsCiAgICAgICAgICAib3AiOiAibHQiLAogICAgICAgICAgInZhbHVlIjogNTAwLAogICAgICAgICAgInlheGlzIjogImxlZnQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiY29sb3JNb2RlIjogIndhcm5pbmciLAogICAgICAgICAgImZpbGwiOiB0cnVlLAogICAgICAgICAgImxpbmUiOiB0cnVlLAogICAgICAgICAgIm9wIjogImx0IiwKICAgICAgICAgICJ2YWx1ZSI6IDEwMDAsCiAgICAgICAgICAieWF4aXMiOiAibGVmdCIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGl0bGUiOiAiVENQIHNvY2tldHMgYXZhaWxhYmxlIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAxLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJkZWNpbWFscyI6IC0xLAogICAgICAgICAgImZvcm1hdCI6ICJub25lIiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgewogICAgICAiY29sbGFwc2VkIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiAxLAogICAgICAgICJ3IjogMjQsCiAgICAgICAgIngiOiAwLAogICAgICAgICJ5IjogMTkKICAgICAgfSwKICAgICAgImlkIjogMjcsCiAgICAgICJwYW5lbHMiOiBbXSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGl0bGUiOiAiUVVFVUVEIE1FU1NBR0VTIiwKICAgICAgInR5cGUiOiAicm93IgogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICB9LAogICAgICAiZGVzY3JpcHRpb24iOiAiVG90YWwgbnVtYmVyIG9mIHJlYWR5IG1lc3NhZ2VzIHJlYWR5IHRvIGJlIGRlbGl2ZXJlZCB0byBjb25zdW1lcnMuXG5cbkFpbSB0byBrZWVwIHRoaXMgdmFsdWUgYXMgbG93IGFzIHBvc3NpYmxlLiBSYWJiaXRNUSBiZWhhdmVzIGJlc3Qgd2hlbiBtZXNzYWdlcyBhcmUgZmxvd2luZyB0aHJvdWdoIGl0LiBJdCdzIE9LIGZvciBwdWJsaXNoZXJzIHRvIG9jY2FzaW9uYWxseSBvdXRwYWNlIGNvbnN1bWVycywgYnV0IHRoZSBleHBlY3RhdGlvbiBpcyB0aGF0IGNvbnN1bWVycyB3aWxsIGV2ZW50dWFsbHkgcHJvY2VzcyBhbGwgcmVhZHkgbWVzc2FnZXMuXG5cbklmIHRoaXMgbWV0cmljIGtlZXBzIGluY3JlYXNpbmcsIHlvdXIgc3lzdGVtIHdpbGwgZXZlbnR1YWxseSBydW4gb3V0IG9mIG1lbW9yeSBhbmQvb3IgZGlzayBzcGFjZS4gQ29uc2lkZXIgdXNpbmcgVFRMIG9yIFF1ZXVlIExlbmd0aCBMaW1pdCB0byBwcmV2ZW50IHVuYm91bmRlZCBtZXNzYWdlIGdyb3d0aC5cblxuKiBbUXVldWVzXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vcXVldWVzLmh0bWwpXG4qIFtDb25zdW1lcnNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25zdW1lcnMuaHRtbClcbiogW1F1ZXVlIExlbmd0aCBMaW1pdF0oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL21heGxlbmd0aC5odG1sKVxuKiBbVGltZS1Uby1MaXZlIGFuZCBFeHBpcmF0aW9uXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vdHRsLmh0bWwpIiwKICAgICAgImZpZWxkQ29uZmlnIjogewogICAgICAgICJkZWZhdWx0cyI6IHsKICAgICAgICAgICJsaW5rcyI6IFtdCiAgICAgICAgfSwKICAgICAgICAib3ZlcnJpZGVzIjogW10KICAgICAgfSwKICAgICAgImZpbGwiOiAxMCwKICAgICAgImZpbGxHcmFkaWVudCI6IDAsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNSwKICAgICAgICAidyI6IDEyLAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDIwCiAgICAgIH0sCiAgICAgICJoaWRkZW5TZXJpZXMiOiBmYWxzZSwKICAgICAgImlkIjogOSwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYWxpZ25Bc1RhYmxlIjogdHJ1ZSwKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiB0cnVlLAogICAgICAgICJtYXgiOiB0cnVlLAogICAgICAgICJtaW4iOiB0cnVlLAogICAgICAgICJyaWdodFNpZGUiOiBmYWxzZSwKICAgICAgICAic2hvdyI6IGZhbHNlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiB0cnVlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCBhcyB6ZXJvIiwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImFsZXJ0VGhyZXNob2xkIjogdHJ1ZQogICAgICB9LAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJwb2ludHJhZGl1cyI6IDIsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM1NkE2NEIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzEoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRjJDQzBDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8yKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzMyNzREOSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNBMzUyQ0MiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzQoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkY3ODBBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj81KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzk2RDk4RCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkVFNTIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzcoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOEFCOEZGIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj84KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0NBOTVFNSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkIzNTciCiAgICAgICAgfQogICAgICBdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogdHJ1ZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInN1bShyYWJiaXRtcV9xdWV1ZV9tZXNzYWdlc19yZWFkeSAqIG9uKGluc3RhbmNlKSBncm91cF9sZWZ0KHJhYmJpdG1xX2NsdXN0ZXIsIHJhYmJpdG1xX25vZGUpIHJhYmJpdG1xX2lkZW50aXR5X2luZm97cmFiYml0bXFfY2x1c3Rlcj1cIiRyYWJiaXRtcV9jbHVzdGVyXCIsIG5hbWVzcGFjZT1cIiRuYW1lc3BhY2VcIn0pIGJ5KHJhYmJpdG1xX25vZGUpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInt7cmFiYml0bXFfbm9kZX19IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aXRsZSI6ICJNZXNzYWdlcyByZWFkeSB0byBiZSBkZWxpdmVyZWQgdG8gY29uc3VtZXJzIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAyLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJkZWNpbWFscyI6IDAsCiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1pbiI6ICIwIiwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdG90YWwgbnVtYmVyIG9mIG1lc3NhZ2VzIHRoYXQgYXJlIGVpdGhlciBpbi1mbGlnaHQgdG8gY29uc3VtZXJzLCBjdXJyZW50bHkgYmVpbmcgcHJvY2Vzc2VkIGJ5IGNvbnN1bWVycyBvciBzaW1wbHkgd2FpdGluZyBmb3IgdGhlIGNvbnN1bWVyIGFja25vd2xlZGdlbWVudHMgdG8gYmUgcHJvY2Vzc2VkIGJ5IHRoZSBxdWV1ZS4gVW50aWwgdGhlIHF1ZXVlIHByb2Nlc3NlcyB0aGUgbWVzc2FnZSBhY2tub3dsZWRnZW1lbnQsIHRoZSBtZXNzYWdlIHdpbGwgcmVtYWluIHVuYWNrbm93bGVkZ2VkLlxuXG4qIFtRdWV1ZXNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9xdWV1ZXMuaHRtbClcbiogW0NvbmZpcm1zIGFuZCBBY2tub3dsZWRnZW1lbnRzXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vY29uZmlybXMuaHRtbClcbiogW0NvbnN1bWVyIFByZWZldGNoXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vY29uc3VtZXItcHJlZmV0Y2guaHRtbCkiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImxpbmtzIjogW10KICAgICAgICB9LAogICAgICAgICJvdmVycmlkZXMiOiBbXQogICAgICB9LAogICAgICAiZmlsbCI6IDEwLAogICAgICAiZmlsbEdyYWRpZW50IjogMCwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA1LAogICAgICAgICJ3IjogMTIsCiAgICAgICAgIngiOiAxMiwKICAgICAgICAieSI6IDIwCiAgICAgIH0sCiAgICAgICJoaWRkZW5TZXJpZXMiOiBmYWxzZSwKICAgICAgImlkIjogMTksCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImFsaWduQXNUYWJsZSI6IHRydWUsCiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogdHJ1ZSwKICAgICAgICAibWF4IjogdHJ1ZSwKICAgICAgICAibWluIjogdHJ1ZSwKICAgICAgICAicmlnaHRTaWRlIjogZmFsc2UsCiAgICAgICAgInNob3ciOiBmYWxzZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogdHJ1ZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwgYXMgemVybyIsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJhbGVydFRocmVzaG9sZCI6IHRydWUKICAgICAgfSwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAicG9pbnRyYWRpdXMiOiAyLAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzAoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjNTZBNjRCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8xKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0YyQ0MwQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiMzMjc0RDkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzMoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQTM1MkNDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj80KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGNzgwQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM5NkQ5OEQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzYoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZFRTUyIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj83KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzhBQjhGRiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNDQTk1RTUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzkoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZCMzU3IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IHRydWUsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZXhwciI6ICJzdW0ocmFiYml0bXFfcXVldWVfbWVzc2FnZXNfdW5hY2tlZCAqIG9uKGluc3RhbmNlKSBncm91cF9sZWZ0KHJhYmJpdG1xX2NsdXN0ZXIsIHJhYmJpdG1xX25vZGUpIHJhYmJpdG1xX2lkZW50aXR5X2luZm97cmFiYml0bXFfY2x1c3Rlcj1cIiRyYWJiaXRtcV9jbHVzdGVyXCIsIG5hbWVzcGFjZT1cIiRuYW1lc3BhY2VcIn0pIGJ5KHJhYmJpdG1xX25vZGUpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInt7cmFiYml0bXFfbm9kZX19IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aXRsZSI6ICJNZXNzYWdlcyBwZW5kaW5nIGNvbnN1bWVyIGFja25vd2xlZGdlbWVudCIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMiwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGVjaW1hbHMiOiAwLAogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiAiIiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtaW4iOiAiMCIsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImNvbGxhcHNlZCI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMSwKICAgICAgICAidyI6IDI0LAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDI1CiAgICAgIH0sCiAgICAgICJpZCI6IDExLAogICAgICAicGFuZWxzIjogW10sCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpdGxlIjogIklOQ09NSU5HIE1FU1NBR0VTIiwKICAgICAgInR5cGUiOiAicm93IgogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICB9LAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGluY29taW5nIG1lc3NhZ2UgcmF0ZSBiZWZvcmUgYW55IHJvdXRpbmcgcnVsZXMgYXJlIGFwcGxpZWQuXG5cbklmIHRoaXMgdmFsdWUgaXMgbG93ZXIgdGhhbiB0aGUgbnVtYmVyIG9mIG1lc3NhZ2VzIHB1Ymxpc2hlZCB0byBxdWV1ZXMsIGl0IG1heSBpbmRpY2F0ZSB0aGF0IHNvbWUgbWVzc2FnZXMgYXJlIGRlbGl2ZXJlZCB0byBtb3JlIHRoYW4gb25lIHF1ZXVlLlxuXG5JZiB0aGlzIHZhbHVlIGlzIGhpZ2hlciB0aGFuIHRoZSBudW1iZXIgb2YgbWVzc2FnZXMgcHVibGlzaGVkIHRvIHF1ZXVlcywgbWVzc2FnZXMgY2Fubm90IGJlIHJvdXRlZCBhbmQgd2lsbCBlaXRoZXIgYmUgZHJvcHBlZCBvciByZXR1cm5lZCB0byBwdWJsaXNoZXJzLlxuXG4qIFtQdWJsaXNoZXJzXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vcHVibGlzaGVycy5odG1sKSIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAibGlua3MiOiBbXQogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJmaWxsIjogMTAsCiAgICAgICJmaWxsR3JhZGllbnQiOiAwLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDUsCiAgICAgICAgInciOiAxMiwKICAgICAgICAieCI6IDAsCiAgICAgICAgInkiOiAyNgogICAgICB9LAogICAgICAiaGlkZGVuU2VyaWVzIjogZmFsc2UsCiAgICAgICJpZCI6IDEzLAogICAgICAibGVnZW5kIjogewogICAgICAgICJhbGlnbkFzVGFibGUiOiB0cnVlLAogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IHRydWUsCiAgICAgICAgIm1heCI6IHRydWUsCiAgICAgICAgIm1pbiI6IHRydWUsCiAgICAgICAgInJpZ2h0U2lkZSI6IGZhbHNlLAogICAgICAgICJzaG93IjogZmFsc2UsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IHRydWUKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIGFzIHplcm8iLAogICAgICAib3B0aW9ucyI6IHsKICAgICAgICAiYWxlcnRUaHJlc2hvbGQiOiB0cnVlCiAgICAgIH0sCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwbHVnaW5WZXJzaW9uIjogIjkuMi4yIiwKICAgICAgInBvaW50cmFkaXVzIjogMiwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8wKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzU2QTY0QiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGMkNDMEMiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzIoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjMzI3NEQ5IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8zKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0EzNTJDQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRjc4MEEiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzUoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOTZEOThEIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj82KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGRUU1MiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM4QUI4RkYiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzgoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQ0E5NUU1IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj85KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGQjM1NyIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiB0cnVlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAic3VtKHJhdGUocmFiYml0bXFfY2hhbm5lbF9tZXNzYWdlc19wdWJsaXNoZWRfdG90YWxbNjBzXSkgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyLCByYWJiaXRtcV9ub2RlKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSBieShyYWJiaXRtcV9ub2RlKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnN0YW50IjogZmFsc2UsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7e3JhYmJpdG1xX25vZGV9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGl0bGUiOiAiTWVzc2FnZXMgcHVibGlzaGVkIC8gcyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMiwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGVjaW1hbHMiOiAwLAogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiAiIiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtaW4iOiAiMCIsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICB9LAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHJhdGUgb2YgbWVzc2FnZXMgY29uZmlybWVkIGJ5IHRoZSBicm9rZXIgdG8gcHVibGlzaGVycy4gUHVibGlzaGVycyBtdXN0IG9wdC1pbiB0byByZWNlaXZlIG1lc3NhZ2UgY29uZmlybWF0aW9ucy5cblxuSWYgdGhpcyBtZXRyaWMgaXMgY29uc2lzdGVudGx5IGF0IHplcm8gaXQgbWF5IHN1Z2dlc3QgdGhhdCBwdWJsaXNoZXIgY29uZmlybXMgYXJlIG5vdCB1c2VkIGJ5IGNsaWVudHMuIFRoZSBzYWZldHkgb2YgcHVibGlzaGVkIG1lc3NhZ2VzIGlzIGxpa2VseSB0byBiZSBhdCByaXNrLlxuXG4qIFtQdWJsaXNoZXIgQ29uZmlybXNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25maXJtcy5odG1sI3B1Ymxpc2hlci1jb25maXJtcylcbiogW1B1Ymxpc2hlciBDb25maXJtcyBhbmQgRGF0YSBTYWZldHldKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9wdWJsaXNoZXJzLmh0bWwjZGF0YS1zYWZldHkpXG4qIFtXaGVuIFdpbGwgUHVibGlzaGVkIE1lc3NhZ2VzIEJlIENvbmZpcm1lZCBieSB0aGUgQnJva2VyP10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NvbmZpcm1zLmh0bWwjd2hlbi1wdWJsaXNoZXMtYXJlLWNvbmZpcm1lZCkiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImxpbmtzIjogW10KICAgICAgICB9LAogICAgICAgICJvdmVycmlkZXMiOiBbXQogICAgICB9LAogICAgICAiZmlsbCI6IDEwLAogICAgICAiZmlsbEdyYWRpZW50IjogMCwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA1LAogICAgICAgICJ3IjogMTIsCiAgICAgICAgIngiOiAxMiwKICAgICAgICAieSI6IDI2CiAgICAgIH0sCiAgICAgICJoaWRkZW5TZXJpZXMiOiBmYWxzZSwKICAgICAgImlkIjogMTgsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImFsaWduQXNUYWJsZSI6IHRydWUsCiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogdHJ1ZSwKICAgICAgICAibWF4IjogdHJ1ZSwKICAgICAgICAibWluIjogdHJ1ZSwKICAgICAgICAicmlnaHRTaWRlIjogZmFsc2UsCiAgICAgICAgInNob3ciOiBmYWxzZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogdHJ1ZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwgYXMgemVybyIsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJhbGVydFRocmVzaG9sZCI6IHRydWUKICAgICAgfSwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAicG9pbnRyYWRpdXMiOiAyLAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzAoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjNTZBNjRCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8xKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0YyQ0MwQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiMzMjc0RDkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzMoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQTM1MkNDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj80KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGNzgwQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM5NkQ5OEQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzYoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZFRTUyIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj83KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzhBQjhGRiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNDQTk1RTUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzkoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZCMzU3IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IHRydWUsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZXhwciI6ICJzdW0ocmF0ZShyYWJiaXRtcV9jaGFubmVsX21lc3NhZ2VzX2NvbmZpcm1lZF90b3RhbFs2MHNdKSAqIG9uKGluc3RhbmNlKSBncm91cF9sZWZ0KHJhYmJpdG1xX2NsdXN0ZXIsIHJhYmJpdG1xX25vZGUpIHJhYmJpdG1xX2lkZW50aXR5X2luZm97cmFiYml0bXFfY2x1c3Rlcj1cIiRyYWJiaXRtcV9jbHVzdGVyXCIsIG5hbWVzcGFjZT1cIiRuYW1lc3BhY2VcIn0pIGJ5KHJhYmJpdG1xX25vZGUpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInt7cmFiYml0bXFfbm9kZX19IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aXRsZSI6ICJNZXNzYWdlcyBjb25maXJtZWQgdG8gcHVibGlzaGVycyAvIHMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDIsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImRlY2ltYWxzIjogMCwKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogIiIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWluIjogIjAiLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSByYXRlIG9mIG1lc3NhZ2VzIHJlY2VpdmVkIGZyb20gcHVibGlzaGVycyBhbmQgc3VjY2Vzc2Z1bGx5IHJvdXRlZCB0byB0aGUgbWFzdGVyIHF1ZXVlIHJlcGxpY2FzLlxuXG4qIFtRdWV1ZXNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9xdWV1ZXMuaHRtbClcbiogW1B1Ymxpc2hlcnNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9wdWJsaXNoZXJzLmh0bWwpIiwKICAgICAgImZpZWxkQ29uZmlnIjogewogICAgICAgICJkZWZhdWx0cyI6IHsKICAgICAgICAgICJsaW5rcyI6IFtdCiAgICAgICAgfSwKICAgICAgICAib3ZlcnJpZGVzIjogW10KICAgICAgfSwKICAgICAgImZpbGwiOiAxMCwKICAgICAgImZpbGxHcmFkaWVudCI6IDAsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNSwKICAgICAgICAidyI6IDEyLAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDMxCiAgICAgIH0sCiAgICAgICJoaWRkZW5TZXJpZXMiOiBmYWxzZSwKICAgICAgImlkIjogNjEsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImFsaWduQXNUYWJsZSI6IHRydWUsCiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogdHJ1ZSwKICAgICAgICAibWF4IjogdHJ1ZSwKICAgICAgICAibWluIjogdHJ1ZSwKICAgICAgICAicmlnaHRTaWRlIjogZmFsc2UsCiAgICAgICAgInNob3ciOiBmYWxzZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogdHJ1ZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwgYXMgemVybyIsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJhbGVydFRocmVzaG9sZCI6IHRydWUKICAgICAgfSwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAicG9pbnRyYWRpdXMiOiAyLAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzAoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjNTZBNjRCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8xKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0YyQ0MwQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiMzMjc0RDkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzMoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQTM1MkNDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj80KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGNzgwQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM5NkQ5OEQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzYoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZFRTUyIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj83KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzhBQjhGRiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNDQTk1RTUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzkoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZCMzU3IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IHRydWUsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZXhwciI6ICJzdW0ocmF0ZShyYWJiaXRtcV9xdWV1ZV9tZXNzYWdlc19wdWJsaXNoZWRfdG90YWxbNjBzXSkgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyLCByYWJiaXRtcV9ub2RlKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSBieShyYWJiaXRtcV9ub2RlKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnN0YW50IjogZmFsc2UsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7e3JhYmJpdG1xX25vZGV9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGl0bGUiOiAiTWVzc2FnZXMgcm91dGVkIHRvIHF1ZXVlcyAvIHMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDIsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImRlY2ltYWxzIjogMCwKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogIiIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWluIjogIjAiLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSByYXRlIG9mIG1lc3NhZ2VzIHJlY2VpdmVkIGZyb20gcHVibGlzaGVycyB0aGF0IGhhdmUgcHVibGlzaGVyIGNvbmZpcm1zIGVuYWJsZWQgYW5kIHRoZSBicm9rZXIgaGFzIG5vdCBjb25maXJtZWQgeWV0LlxuXG4qIFtQdWJsaXNoZXJzXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vcHVibGlzaGVycy5odG1sKVxuKiBbQ29uZmlybXMgYW5kIEFja25vd2xlZGdlbWVudHNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25maXJtcy5odG1sKVxuKiBbV2hlbiBXaWxsIFB1Ymxpc2hlZCBNZXNzYWdlcyBCZSBDb25maXJtZWQgYnkgdGhlIEJyb2tlcj9dKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25maXJtcy5odG1sI3doZW4tcHVibGlzaGVzLWFyZS1jb25maXJtZWQpIiwKICAgICAgImZpZWxkQ29uZmlnIjogewogICAgICAgICJkZWZhdWx0cyI6IHsKICAgICAgICAgICJsaW5rcyI6IFtdCiAgICAgICAgfSwKICAgICAgICAib3ZlcnJpZGVzIjogW10KICAgICAgfSwKICAgICAgImZpbGwiOiAxMCwKICAgICAgImZpbGxHcmFkaWVudCI6IDAsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNSwKICAgICAgICAidyI6IDEyLAogICAgICAgICJ4IjogMTIsCiAgICAgICAgInkiOiAzMQogICAgICB9LAogICAgICAiaGlkZGVuU2VyaWVzIjogZmFsc2UsCiAgICAgICJpZCI6IDEyLAogICAgICAibGVnZW5kIjogewogICAgICAgICJhbGlnbkFzVGFibGUiOiB0cnVlLAogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IHRydWUsCiAgICAgICAgIm1heCI6IHRydWUsCiAgICAgICAgIm1pbiI6IHRydWUsCiAgICAgICAgInJpZ2h0U2lkZSI6IGZhbHNlLAogICAgICAgICJzaG93IjogZmFsc2UsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IHRydWUKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIiwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImFsZXJ0VGhyZXNob2xkIjogdHJ1ZQogICAgICB9LAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJwb2ludHJhZGl1cyI6IDIsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM1NkE2NEIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzEoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRjJDQzBDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8yKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzMyNzREOSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNBMzUyQ0MiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzQoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkY3ODBBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj81KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzk2RDk4RCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkVFNTIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzcoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOEFCOEZGIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj84KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0NBOTVFNSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkIzNTciCiAgICAgICAgfQogICAgICBdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogdHJ1ZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInN1bShyYXRlKHJhYmJpdG1xX2NoYW5uZWxfbWVzc2FnZXNfdW5jb25maXJtZWRbNjBzXSkgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyLCByYWJiaXRtcV9ub2RlKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSBieShyYWJiaXRtcV9ub2RlKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnN0YW50IjogZmFsc2UsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7e3JhYmJpdG1xX25vZGV9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGl0bGUiOiAiTWVzc2FnZXMgdW5jb25maXJtZWQgdG8gcHVibGlzaGVycyAvIHMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDIsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImRlY2ltYWxzIjogMCwKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogIiIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWluIjogIjAiLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSByYXRlIG9mIG1lc3NhZ2VzIHRoYXQgY2Fubm90IGJlIHJvdXRlZCBhbmQgYXJlIGRyb3BwZWQuIFxuXG5BbnkgdmFsdWUgYWJvdmUgemVybyBtZWFucyBtZXNzYWdlIGxvc3MgYW5kIGxpa2VseSBzdWdnZXN0cyBhIHJvdXRpbmcgcHJvYmxlbSBvbiB0aGUgcHVibGlzaGVyIGVuZC5cblxuKiBbVW5yb3V0YWJsZSBNZXNzYWdlIEhhbmRsaW5nXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vcHVibGlzaGVycy5odG1sI3Vucm91dGFibGUpIiwKICAgICAgImZpZWxkQ29uZmlnIjogewogICAgICAgICJkZWZhdWx0cyI6IHsKICAgICAgICAgICJsaW5rcyI6IFtdCiAgICAgICAgfSwKICAgICAgICAib3ZlcnJpZGVzIjogW10KICAgICAgfSwKICAgICAgImZpbGwiOiAxMCwKICAgICAgImZpbGxHcmFkaWVudCI6IDAsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNSwKICAgICAgICAidyI6IDEyLAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDM2CiAgICAgIH0sCiAgICAgICJoaWRkZW5TZXJpZXMiOiBmYWxzZSwKICAgICAgImlkIjogMzQsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImFsaWduQXNUYWJsZSI6IHRydWUsCiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogdHJ1ZSwKICAgICAgICAibWF4IjogdHJ1ZSwKICAgICAgICAibWluIjogdHJ1ZSwKICAgICAgICAicmlnaHRTaWRlIjogZmFsc2UsCiAgICAgICAgInNob3ciOiBmYWxzZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogdHJ1ZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwgYXMgemVybyIsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJhbGVydFRocmVzaG9sZCI6IHRydWUKICAgICAgfSwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAicG9pbnRyYWRpdXMiOiAyLAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL3JhYmJpdC8iLAogICAgICAgICAgImNvbG9yIjogIiNDNDE2MkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogdHJ1ZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInN1bShyYXRlKHJhYmJpdG1xX2NoYW5uZWxfbWVzc2FnZXNfdW5yb3V0YWJsZV9kcm9wcGVkX3RvdGFsWzYwc10pICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlciwgcmFiYml0bXFfbm9kZSkgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkgYnkocmFiYml0bXFfbm9kZSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3tyYWJiaXRtcV9ub2RlfX0iLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiY29sb3JNb2RlIjogImNyaXRpY2FsIiwKICAgICAgICAgICJmaWxsIjogdHJ1ZSwKICAgICAgICAgICJsaW5lIjogdHJ1ZSwKICAgICAgICAgICJvcCI6ICJndCIsCiAgICAgICAgICAidmFsdWUiOiAwLAogICAgICAgICAgInlheGlzIjogImxlZnQiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpdGxlIjogIlVucm91dGFibGUgbWVzc2FnZXMgZHJvcHBlZCAvIHMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDIsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiAiIiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtaW4iOiAiMCIsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICB9LAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHJhdGUgb2YgbWVzc2FnZXMgdGhhdCBjYW5ub3QgYmUgcm91dGVkIGFuZCBhcmUgcmV0dXJuZWQgYmFjayB0byBwdWJsaXNoZXJzLlxuXG5TdXN0YWluZWQgdmFsdWVzIGFib3ZlIHplcm8gbWF5IGluZGljYXRlIGEgcm91dGluZyBwcm9ibGVtIG9uIHRoZSBwdWJsaXNoZXIgZW5kLlxuXG4qIFtVbnJvdXRhYmxlIE1lc3NhZ2UgSGFuZGxpbmddKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9wdWJsaXNoZXJzLmh0bWwjdW5yb3V0YWJsZSlcbiogW1doZW4gV2lsbCBQdWJsaXNoZWQgTWVzc2FnZXMgQmUgQ29uZmlybWVkIGJ5IHRoZSBCcm9rZXI/XShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vY29uZmlybXMuaHRtbCN3aGVuLXB1Ymxpc2hlcy1hcmUtY29uZmlybWVkKSIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAibGlua3MiOiBbXQogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJmaWxsIjogMTAsCiAgICAgICJmaWxsR3JhZGllbnQiOiAwLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDUsCiAgICAgICAgInciOiAxMiwKICAgICAgICAieCI6IDEyLAogICAgICAgICJ5IjogMzYKICAgICAgfSwKICAgICAgImhpZGRlblNlcmllcyI6IGZhbHNlLAogICAgICAiaWQiOiAxNiwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYWxpZ25Bc1RhYmxlIjogdHJ1ZSwKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiB0cnVlLAogICAgICAgICJtYXgiOiB0cnVlLAogICAgICAgICJtaW4iOiB0cnVlLAogICAgICAgICJyaWdodFNpZGUiOiBmYWxzZSwKICAgICAgICAic2hvdyI6IGZhbHNlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiB0cnVlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCBhcyB6ZXJvIiwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImFsZXJ0VGhyZXNob2xkIjogdHJ1ZQogICAgICB9LAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJwb2ludHJhZGl1cyI6IDIsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvcmFiYml0LyIsCiAgICAgICAgICAiY29sb3IiOiAiI0M0MTYyQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiB0cnVlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAic3VtKHJhdGUocmFiYml0bXFfY2hhbm5lbF9tZXNzYWdlc191bnJvdXRhYmxlX3JldHVybmVkX3RvdGFsWzYwc10pICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlciwgcmFiYml0bXFfbm9kZSkgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkgYnkocmFiYml0bXFfbm9kZSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3tyYWJiaXRtcV9ub2RlfX0iLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiY29sb3JNb2RlIjogImNyaXRpY2FsIiwKICAgICAgICAgICJmaWxsIjogdHJ1ZSwKICAgICAgICAgICJsaW5lIjogdHJ1ZSwKICAgICAgICAgICJvcCI6ICJndCIsCiAgICAgICAgICAidmFsdWUiOiAwLAogICAgICAgICAgInlheGlzIjogImxlZnQiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpdGxlIjogIlVucm91dGFibGUgbWVzc2FnZXMgcmV0dXJuZWQgdG8gcHVibGlzaGVycyAvIHMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDIsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiAiIiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtaW4iOiAiMCIsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImNvbGxhcHNlZCI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMSwKICAgICAgICAidyI6IDI0LAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDQxCiAgICAgIH0sCiAgICAgICJpZCI6IDI5LAogICAgICAicGFuZWxzIjogW10sCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpdGxlIjogIk9VVEdPSU5HIE1FU1NBR0VTIiwKICAgICAgInR5cGUiOiAicm93IgogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICB9LAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHJhdGUgb2YgbWVzc2FnZXMgZGVsaXZlcmVkIHRvIGNvbnN1bWVycy4gSXQgaW5jbHVkZXMgbWVzc2FnZXMgdGhhdCBoYXZlIGJlZW4gcmVkZWxpdmVyZWQuXG5cblRoaXMgbWV0cmljIGRvZXMgbm90IGluY2x1ZGUgbWVzc2FnZXMgdGhhdCBoYXZlIGJlZW4gZmV0Y2hlZCBieSBjb25zdW1lcnMgdXNpbmcgYGJhc2ljLmdldGAgKGNvbnN1bWVkIGJ5IHBvbGxpbmcpLlxuXG4qIFtDb25zdW1lcnNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25zdW1lcnMuaHRtbCkiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImxpbmtzIjogW10KICAgICAgICB9LAogICAgICAgICJvdmVycmlkZXMiOiBbXQogICAgICB9LAogICAgICAiZmlsbCI6IDEwLAogICAgICAiZmlsbEdyYWRpZW50IjogMCwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA1LAogICAgICAgICJ3IjogMTIsCiAgICAgICAgIngiOiAwLAogICAgICAgICJ5IjogNDIKICAgICAgfSwKICAgICAgImhpZGRlblNlcmllcyI6IGZhbHNlLAogICAgICAiaWQiOiAxNCwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYWxpZ25Bc1RhYmxlIjogdHJ1ZSwKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiB0cnVlLAogICAgICAgICJtYXgiOiB0cnVlLAogICAgICAgICJtaW4iOiB0cnVlLAogICAgICAgICJyaWdodFNpZGUiOiBmYWxzZSwKICAgICAgICAic2hvdyI6IGZhbHNlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiB0cnVlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCBhcyB6ZXJvIiwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImFsZXJ0VGhyZXNob2xkIjogdHJ1ZQogICAgICB9LAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJwb2ludHJhZGl1cyI6IDIsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM1NkE2NEIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzEoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRjJDQzBDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8yKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzMyNzREOSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNBMzUyQ0MiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzQoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkY3ODBBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj81KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzk2RDk4RCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkVFNTIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzcoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOEFCOEZGIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj84KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0NBOTVFNSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkIzNTciCiAgICAgICAgfQogICAgICBdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogdHJ1ZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInN1bShcbiAgKHJhdGUocmFiYml0bXFfY2hhbm5lbF9tZXNzYWdlc19kZWxpdmVyZWRfdG90YWxbNjBzXSkgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyLCByYWJiaXRtcV9ub2RlKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSArXG4gIChyYXRlKHJhYmJpdG1xX2NoYW5uZWxfbWVzc2FnZXNfZGVsaXZlcmVkX2Fja190b3RhbFs2MHNdKSAqIG9uKGluc3RhbmNlKSBncm91cF9sZWZ0KHJhYmJpdG1xX2NsdXN0ZXIsIHJhYmJpdG1xX25vZGUpIHJhYmJpdG1xX2lkZW50aXR5X2luZm97cmFiYml0bXFfY2x1c3Rlcj1cIiRyYWJiaXRtcV9jbHVzdGVyXCIsIG5hbWVzcGFjZT1cIiRuYW1lc3BhY2VcIn0pXG4pIGJ5KHJhYmJpdG1xX25vZGUpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInt7cmFiYml0bXFfbm9kZX19IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aXRsZSI6ICJNZXNzYWdlcyBkZWxpdmVyZWQgLyBzIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAyLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJkZWNpbWFscyI6IDAsCiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1pbiI6ICIwIiwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmF0ZSBvZiBtZXNzYWdlcyB0aGF0IGhhdmUgYmVlbiByZWRlbGl2ZXJlZCB0byBjb25zdW1lcnMuIEl0IGluY2x1ZGVzIG1lc3NhZ2VzIHRoYXQgaGF2ZSBiZWVuIHJlcXVldWVkIGF1dG9tYXRpY2FsbHkgYW5kIHJlZGVsaXZlcmVkIGR1ZSB0byBjaGFubmVsIGV4Y2VwdGlvbnMgb3IgY29ubmVjdGlvbiBjbG9zdXJlcy5cblxuSGF2aW5nIHNvbWUgcmVkZWxpdmVyaWVzIGlzIGV4cGVjdGVkLCBidXQgaWYgdGhpcyBtZXRyaWMgaXMgY29uc2lzdGVudGx5IG5vbi16ZXJvLCBpdCBpcyB3b3J0aCBpbnZlc3RpZ2F0aW5nIHdoeS5cblxuKiBbTmVnYXRpdmUgQWNrbm93bGVkZ2VtZW50IGFuZCBSZXF1ZXVpbmcgb2YgRGVsaXZlcmllc10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NvbmZpcm1zLmh0bWwjY29uc3VtZXItbmFja3MtcmVxdWV1ZSlcbiogW0NvbnN1bWVyc10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NvbnN1bWVycy5odG1sKSIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAibGlua3MiOiBbXQogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJmaWxsIjogMTAsCiAgICAgICJmaWxsR3JhZGllbnQiOiAwLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDUsCiAgICAgICAgInciOiAxMiwKICAgICAgICAieCI6IDEyLAogICAgICAgICJ5IjogNDIKICAgICAgfSwKICAgICAgImhpZGRlblNlcmllcyI6IGZhbHNlLAogICAgICAiaWQiOiAxNSwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYWxpZ25Bc1RhYmxlIjogdHJ1ZSwKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiB0cnVlLAogICAgICAgICJtYXgiOiB0cnVlLAogICAgICAgICJtaW4iOiB0cnVlLAogICAgICAgICJyaWdodFNpZGUiOiBmYWxzZSwKICAgICAgICAic2hvdyI6IGZhbHNlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiB0cnVlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCBhcyB6ZXJvIiwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImFsZXJ0VGhyZXNob2xkIjogdHJ1ZQogICAgICB9LAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJwb2ludHJhZGl1cyI6IDIsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM1NkE2NEIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzEoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRjJDQzBDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8yKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzMyNzREOSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNBMzUyQ0MiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzQoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkY3ODBBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj81KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzk2RDk4RCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkVFNTIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzcoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOEFCOEZGIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj84KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0NBOTVFNSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkIzNTciCiAgICAgICAgfQogICAgICBdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogdHJ1ZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInN1bShyYXRlKHJhYmJpdG1xX2NoYW5uZWxfbWVzc2FnZXNfcmVkZWxpdmVyZWRfdG90YWxbNjBzXSkgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyLCByYWJiaXRtcV9ub2RlKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSBieShyYWJiaXRtcV9ub2RlKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnN0YW50IjogZmFsc2UsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7e3JhYmJpdG1xX25vZGV9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogWwogICAgICAgIHsKICAgICAgICAgICJjb2xvck1vZGUiOiAid2FybmluZyIsCiAgICAgICAgICAiZmlsbCI6IHRydWUsCiAgICAgICAgICAibGluZSI6IHRydWUsCiAgICAgICAgICAib3AiOiAiZ3QiLAogICAgICAgICAgInZhbHVlIjogMjAsCiAgICAgICAgICAieWF4aXMiOiAibGVmdCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJjb2xvck1vZGUiOiAiY3JpdGljYWwiLAogICAgICAgICAgImZpbGwiOiB0cnVlLAogICAgICAgICAgImxpbmUiOiB0cnVlLAogICAgICAgICAgIm9wIjogImd0IiwKICAgICAgICAgICJ2YWx1ZSI6IDEwMCwKICAgICAgICAgICJ5YXhpcyI6ICJsZWZ0IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aXRsZSI6ICJNZXNzYWdlcyByZWRlbGl2ZXJlZCAvIHMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDIsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiAiIiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtaW4iOiAiMCIsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICB9LAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHJhdGUgb2YgbWVzc2FnZSBkZWxpdmVyaWVzIHRvIGNvbnN1bWVycyB0aGF0IHVzZSBtYW51YWwgYWNrbm93bGVkZ2VtZW50IG1vZGUuXG5cbldoZW4gdGhpcyBtb2RlIGlzIHVzZWQsIFJhYmJpdE1RIHdhaXRzIGZvciBjb25zdW1lcnMgdG8gYWNrbm93bGVkZ2UgbWVzc2FnZXMgYmVmb3JlIG1vcmUgbWVzc2FnZXMgY2FuIGJlIGRlbGl2ZXJlZC5cblxuVGhpcyBpcyB0aGUgc2FmZXN0IHdheSBvZiBjb25zdW1pbmcgbWVzc2FnZXMuXG5cbiogW0NvbnN1bWVyIEFja25vd2xlZGdlbWVudHNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25maXJtcy5odG1sKVxuKiBbQ29uc3VtZXIgUHJlZmV0Y2hdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25zdW1lci1wcmVmZXRjaC5odG1sKVxuKiBbQ29uc3VtZXIgQWNrbm93bGVkZ2VtZW50IE1vZGVzLCBQcmVmZXRjaCBhbmQgVGhyb3VnaHB1dF0oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NvbmZpcm1zLmh0bWwjY2hhbm5lbC1xb3MtcHJlZmV0Y2gtdGhyb3VnaHB1dClcbiogW0NvbnN1bWVyc10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NvbnN1bWVycy5odG1sKSIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAibGlua3MiOiBbXQogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJmaWxsIjogMTAsCiAgICAgICJmaWxsR3JhZGllbnQiOiAwLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDUsCiAgICAgICAgInciOiAxMiwKICAgICAgICAieCI6IDAsCiAgICAgICAgInkiOiA0NwogICAgICB9LAogICAgICAiaGlkZGVuU2VyaWVzIjogZmFsc2UsCiAgICAgICJpZCI6IDIwLAogICAgICAibGVnZW5kIjogewogICAgICAgICJhbGlnbkFzVGFibGUiOiB0cnVlLAogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IHRydWUsCiAgICAgICAgIm1heCI6IHRydWUsCiAgICAgICAgIm1pbiI6IHRydWUsCiAgICAgICAgInJpZ2h0U2lkZSI6IGZhbHNlLAogICAgICAgICJzaG93IjogZmFsc2UsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IHRydWUKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIGFzIHplcm8iLAogICAgICAib3B0aW9ucyI6IHsKICAgICAgICAiYWxlcnRUaHJlc2hvbGQiOiB0cnVlCiAgICAgIH0sCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwbHVnaW5WZXJzaW9uIjogIjkuMi4yIiwKICAgICAgInBvaW50cmFkaXVzIjogMiwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8wKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzU2QTY0QiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGMkNDMEMiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzIoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjMzI3NEQ5IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8zKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0EzNTJDQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRjc4MEEiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzUoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOTZEOThEIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj82KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGRUU1MiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM4QUI4RkYiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzgoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQ0E5NUU1IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj85KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGQjM1NyIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiB0cnVlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAic3VtKHJhdGUocmFiYml0bXFfY2hhbm5lbF9tZXNzYWdlc19kZWxpdmVyZWRfYWNrX3RvdGFsWzYwc10pICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlciwgcmFiYml0bXFfbm9kZSkgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkgYnkocmFiYml0bXFfbm9kZSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3tyYWJiaXRtcV9ub2RlfX0iLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpdGxlIjogIk1lc3NhZ2VzIGRlbGl2ZXJlZCB3aXRoIG1hbnVhbCBhY2sgLyBzIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAyLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJkZWNpbWFscyI6IDAsCiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1pbiI6ICIwIiwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmF0ZSBvZiBtZXNzYWdlIGRlbGl2ZXJpZXMgdG8gY29uc3VtZXJzIHRoYXQgdXNlIGF1dG9tYXRpYyBhY2tub3dsZWRnZW1lbnQgbW9kZS5cblxuV2hlbiB0aGlzIG1vZGUgaXMgdXNlZCwgUmFiYml0TVEgZG9lcyBub3Qgd2FpdCBmb3IgY29uc3VtZXJzIHRvIGFja25vd2xlZGdlIG1lc3NhZ2UgZGVsaXZlcmllcy5cblxuVGhpcyBtb2RlIGlzIGZpcmUtYW5kLWZvcmdldCBhbmQgZG9lcyBub3Qgb2ZmZXIgYW55IGRlbGl2ZXJ5IHNhZmV0eSBndWFyYW50ZWVzLiBJdCB0ZW5kcyB0byBwcm92aWRlIGhpZ2hlciB0aHJvdWdocHV0IGFuZCBpdCBtYXkgbGVhZCB0byBjb25zdW1lciBvdmVybG9hZCAgYW5kIGhpZ2hlciBjb25zdW1lciBtZW1vcnkgdXNhZ2UuXG5cbiogW0NvbnN1bWVyIEFja25vd2xlZGdlbWVudCBNb2RlcywgUHJlZmV0Y2ggYW5kIFRocm91Z2hwdXRdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25maXJtcy5odG1sI2NoYW5uZWwtcW9zLXByZWZldGNoLXRocm91Z2hwdXQpXG4qIFtDb25zdW1lcnNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25zdW1lcnMuaHRtbCkiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImxpbmtzIjogW10KICAgICAgICB9LAogICAgICAgICJvdmVycmlkZXMiOiBbXQogICAgICB9LAogICAgICAiZmlsbCI6IDEwLAogICAgICAiZmlsbEdyYWRpZW50IjogMCwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA1LAogICAgICAgICJ3IjogMTIsCiAgICAgICAgIngiOiAxMiwKICAgICAgICAieSI6IDQ3CiAgICAgIH0sCiAgICAgICJoaWRkZW5TZXJpZXMiOiBmYWxzZSwKICAgICAgImlkIjogMjEsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImFsaWduQXNUYWJsZSI6IHRydWUsCiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogdHJ1ZSwKICAgICAgICAibWF4IjogdHJ1ZSwKICAgICAgICAibWluIjogdHJ1ZSwKICAgICAgICAicmlnaHRTaWRlIjogZmFsc2UsCiAgICAgICAgInNob3ciOiBmYWxzZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogdHJ1ZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwgYXMgemVybyIsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJhbGVydFRocmVzaG9sZCI6IHRydWUKICAgICAgfSwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAicG9pbnRyYWRpdXMiOiAyLAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzAoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjNTZBNjRCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8xKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0YyQ0MwQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiMzMjc0RDkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzMoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQTM1MkNDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj80KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGNzgwQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM5NkQ5OEQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzYoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZFRTUyIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj83KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzhBQjhGRiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNDQTk1RTUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzkoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZCMzU3IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IHRydWUsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZXhwciI6ICJzdW0ocmF0ZShyYWJiaXRtcV9jaGFubmVsX21lc3NhZ2VzX2RlbGl2ZXJlZF90b3RhbFs2MHNdKSAqIG9uKGluc3RhbmNlKSBncm91cF9sZWZ0KHJhYmJpdG1xX2NsdXN0ZXIsIHJhYmJpdG1xX25vZGUpIHJhYmJpdG1xX2lkZW50aXR5X2luZm97cmFiYml0bXFfY2x1c3Rlcj1cIiRyYWJiaXRtcV9jbHVzdGVyXCIsIG5hbWVzcGFjZT1cIiRuYW1lc3BhY2VcIn0pIGJ5KHJhYmJpdG1xX25vZGUpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInt7cmFiYml0bXFfbm9kZX19IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbXSwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aXRsZSI6ICJNZXNzYWdlcyBkZWxpdmVyZWQgYXV0byBhY2sgLyBzIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAyLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJkZWNpbWFscyI6IDAsCiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1pbiI6ICIwIiwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmF0ZSBvZiBtZXNzYWdlIGFja25vd2xlZGdlbWVudHMgY29taW5nIGZyb20gY29uc3VtZXJzIHRoYXQgdXNlIG1hbnVhbCBhY2tub3dsZWRnZW1lbnQgbW9kZS5cblxuKiBbQ29uc3VtZXIgQWNrbm93bGVkZ2VtZW50c10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NvbmZpcm1zLmh0bWwpXG4qIFtDb25zdW1lciBQcmVmZXRjaF0oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NvbnN1bWVyLXByZWZldGNoLmh0bWwpXG4qIFtDb25zdW1lciBBY2tub3dsZWRnZW1lbnQgTW9kZXMsIFByZWZldGNoIGFuZCBUaHJvdWdocHV0XShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vY29uZmlybXMuaHRtbCNjaGFubmVsLXFvcy1wcmVmZXRjaC10aHJvdWdocHV0KVxuKiBbQ29uc3VtZXJzXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vY29uc3VtZXJzLmh0bWwpIiwKICAgICAgImZpZWxkQ29uZmlnIjogewogICAgICAgICJkZWZhdWx0cyI6IHsKICAgICAgICAgICJsaW5rcyI6IFtdCiAgICAgICAgfSwKICAgICAgICAib3ZlcnJpZGVzIjogW10KICAgICAgfSwKICAgICAgImZpbGwiOiAxMCwKICAgICAgImZpbGxHcmFkaWVudCI6IDAsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNSwKICAgICAgICAidyI6IDEyLAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDUyCiAgICAgIH0sCiAgICAgICJoaWRkZW5TZXJpZXMiOiBmYWxzZSwKICAgICAgImlkIjogMjIsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImFsaWduQXNUYWJsZSI6IHRydWUsCiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogdHJ1ZSwKICAgICAgICAibWF4IjogdHJ1ZSwKICAgICAgICAibWluIjogdHJ1ZSwKICAgICAgICAicmlnaHRTaWRlIjogZmFsc2UsCiAgICAgICAgInNob3ciOiBmYWxzZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogdHJ1ZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwgYXMgemVybyIsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJhbGVydFRocmVzaG9sZCI6IHRydWUKICAgICAgfSwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAicG9pbnRyYWRpdXMiOiAyLAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzAoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjNTZBNjRCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8xKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0YyQ0MwQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiMzMjc0RDkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzMoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQTM1MkNDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj80KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGNzgwQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM5NkQ5OEQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzYoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZFRTUyIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj83KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzhBQjhGRiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNDQTk1RTUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzkoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZCMzU3IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IHRydWUsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZXhwciI6ICJzdW0ocmF0ZShyYWJiaXRtcV9jaGFubmVsX21lc3NhZ2VzX2Fja2VkX3RvdGFsWzYwc10pICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlciwgcmFiYml0bXFfbm9kZSkgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkgYnkocmFiYml0bXFfbm9kZSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3tyYWJiaXRtcV9ub2RlfX0iLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpdGxlIjogIk1lc3NhZ2VzIGFja25vd2xlZGdlZCAvIHMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDIsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImRlY2ltYWxzIjogMCwKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogIiIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWluIjogIjAiLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSByYXRlIG9mIG1lc3NhZ2VzIGRlbGl2ZXJlZCB0byBwb2xsaW5nIGNvbnN1bWVycyB0aGF0IHVzZSBhdXRvbWF0aWMgYWNrbm93bGVkZ2VtZW50IG1vZGUuXG5cblRoZSB1c2Ugb2YgcG9sbGluZyBjb25zdW1lcnMgaXMgaGlnaGx5IGluZWZmaWNpZW50IGFuZCB0aGVyZWZvcmUgc3Ryb25nbHkgZGlzY291cmFnZWQuXG5cbiogW0ZldGNoaW5nIGluZGl2aWR1YWwgbWVzc2FnZXNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25zdW1lcnMuaHRtbCNmZXRjaGluZylcbiogW0NvbnN1bWVyc10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NvbnN1bWVycy5odG1sKSIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAibGlua3MiOiBbXQogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJmaWxsIjogMTAsCiAgICAgICJmaWxsR3JhZGllbnQiOiAwLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDUsCiAgICAgICAgInciOiAxMiwKICAgICAgICAieCI6IDEyLAogICAgICAgICJ5IjogNTIKICAgICAgfSwKICAgICAgImhpZGRlblNlcmllcyI6IGZhbHNlLAogICAgICAiaWQiOiAyNCwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYWxpZ25Bc1RhYmxlIjogdHJ1ZSwKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiB0cnVlLAogICAgICAgICJtYXgiOiB0cnVlLAogICAgICAgICJtaW4iOiB0cnVlLAogICAgICAgICJyaWdodFNpZGUiOiBmYWxzZSwKICAgICAgICAic2hvdyI6IGZhbHNlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiB0cnVlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCBhcyB6ZXJvIiwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImFsZXJ0VGhyZXNob2xkIjogdHJ1ZQogICAgICB9LAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJwb2ludHJhZGl1cyI6IDIsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvcmFiYml0LyIsCiAgICAgICAgICAiY29sb3IiOiAiI0M0MTYyQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiB0cnVlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAic3VtKHJhdGUocmFiYml0bXFfY2hhbm5lbF9nZXRfdG90YWxbNjBzXSkgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyLCByYWJiaXRtcV9ub2RlKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSBieShyYWJiaXRtcV9ub2RlKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnN0YW50IjogZmFsc2UsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7e3JhYmJpdG1xX25vZGV9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogWwogICAgICAgIHsKICAgICAgICAgICJjb2xvck1vZGUiOiAiY3JpdGljYWwiLAogICAgICAgICAgImZpbGwiOiB0cnVlLAogICAgICAgICAgImxpbmUiOiB0cnVlLAogICAgICAgICAgIm9wIjogImd0IiwKICAgICAgICAgICJ2YWx1ZSI6IDAsCiAgICAgICAgICAieWF4aXMiOiAibGVmdCIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGl0bGUiOiAiUG9sbGluZyBvcGVyYXRpb25zIHdpdGggYXV0byBhY2sgLyBzIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAyLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogIiIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWluIjogIjAiLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSByYXRlIG9mIHBvbGxpbmcgY29uc3VtZXIgb3BlcmF0aW9ucyB0aGF0IHlpZWxkIG5vIHJlc3VsdC5cblxuQW55IHZhbHVlIGFib3ZlIHplcm8gbWVhbnMgdGhhdCBSYWJiaXRNUSByZXNvdXJjZXMgYXJlIHdhc3RlZCBieSBwb2xsaW5nIGNvbnN1bWVycy5cblxuQ29tcGFyZSB0aGlzIG1ldHJpYyB0byB0aGUgb3RoZXIgcG9sbGluZyBjb25zdW1lciBtZXRyaWNzIHRvIHNlZSB0aGUgaW5lZmZpY2llbmN5IHJhdGUuXG5cblRoZSB1c2Ugb2YgcG9sbGluZyBjb25zdW1lcnMgaXMgaGlnaGx5IGluZWZmaWNpZW50IGFuZCB0aGVyZWZvcmUgc3Ryb25nbHkgZGlzY291cmFnZWQuXG5cbiogW0ZldGNoaW5nIGluZGl2aWR1YWwgbWVzc2FnZXNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25zdW1lcnMuaHRtbCNmZXRjaGluZylcbiogW0NvbnN1bWVyc10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NvbnN1bWVycy5odG1sKSIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAibGlua3MiOiBbXQogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJmaWxsIjogMTAsCiAgICAgICJmaWxsR3JhZGllbnQiOiAwLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDUsCiAgICAgICAgInciOiAxMiwKICAgICAgICAieCI6IDAsCiAgICAgICAgInkiOiA1NwogICAgICB9LAogICAgICAiaGlkZGVuU2VyaWVzIjogZmFsc2UsCiAgICAgICJpZCI6IDI1LAogICAgICAibGVnZW5kIjogewogICAgICAgICJhbGlnbkFzVGFibGUiOiB0cnVlLAogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IHRydWUsCiAgICAgICAgImhpZGVFbXB0eSI6IGZhbHNlLAogICAgICAgICJtYXgiOiB0cnVlLAogICAgICAgICJtaW4iOiB0cnVlLAogICAgICAgICJyaWdodFNpZGUiOiBmYWxzZSwKICAgICAgICAic2hvdyI6IGZhbHNlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiB0cnVlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCBhcyB6ZXJvIiwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImFsZXJ0VGhyZXNob2xkIjogdHJ1ZQogICAgICB9LAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJwb2ludHJhZGl1cyI6IDIsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvcmFiYml0LyIsCiAgICAgICAgICAiY29sb3IiOiAiI0M0MTYyQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiB0cnVlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAic3VtKHJhdGUocmFiYml0bXFfY2hhbm5lbF9nZXRfZW1wdHlfdG90YWxbNjBzXSkgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyLCByYWJiaXRtcV9ub2RlKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSBieShyYWJiaXRtcV9ub2RlKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnN0YW50IjogZmFsc2UsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7e3JhYmJpdG1xX25vZGV9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogWwogICAgICAgIHsKICAgICAgICAgICJjb2xvck1vZGUiOiAiY3JpdGljYWwiLAogICAgICAgICAgImZpbGwiOiB0cnVlLAogICAgICAgICAgImxpbmUiOiB0cnVlLAogICAgICAgICAgIm9wIjogImd0IiwKICAgICAgICAgICJ2YWx1ZSI6IDAsCiAgICAgICAgICAieWF4aXMiOiAibGVmdCIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGl0bGUiOiAiUG9sbGluZyBvcGVyYXRpb25zIHRoYXQgeWllbGQgbm8gcmVzdWx0IC8gcyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMiwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1pbiI6ICIwIiwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmF0ZSBvZiBtZXNzYWdlcyBkZWxpdmVyZWQgdG8gcG9sbGluZyBjb25zdW1lcnMgdGhhdCB1c2UgbWFudWFsIGFja25vd2xlZGdlbWVudCBtb2RlLlxuXG5UaGUgdXNlIG9mIHBvbGxpbmcgY29uc3VtZXJzIGlzIGhpZ2hseSBpbmVmZmljaWVudCBhbmQgdGhlcmVmb3JlIHN0cm9uZ2x5IGRpc2NvdXJhZ2VkLlxuXG4qIFtGZXRjaGluZyBpbmRpdmlkdWFsIG1lc3NhZ2VzXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vY29uc3VtZXJzLmh0bWwjZmV0Y2hpbmcpXG4qIFtDb25zdW1lcnNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25zdW1lcnMuaHRtbCkiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImxpbmtzIjogW10KICAgICAgICB9LAogICAgICAgICJvdmVycmlkZXMiOiBbXQogICAgICB9LAogICAgICAiZmlsbCI6IDEwLAogICAgICAiZmlsbEdyYWRpZW50IjogMCwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA1LAogICAgICAgICJ3IjogMTIsCiAgICAgICAgIngiOiAxMiwKICAgICAgICAieSI6IDU3CiAgICAgIH0sCiAgICAgICJoaWRkZW5TZXJpZXMiOiBmYWxzZSwKICAgICAgImlkIjogMjMsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImFsaWduQXNUYWJsZSI6IHRydWUsCiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogdHJ1ZSwKICAgICAgICAibWF4IjogdHJ1ZSwKICAgICAgICAibWluIjogdHJ1ZSwKICAgICAgICAicmlnaHRTaWRlIjogZmFsc2UsCiAgICAgICAgInNob3ciOiBmYWxzZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogdHJ1ZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwgYXMgemVybyIsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJhbGVydFRocmVzaG9sZCI6IHRydWUKICAgICAgfSwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAicG9pbnRyYWRpdXMiOiAyLAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL3JhYmJpdC8iLAogICAgICAgICAgImNvbG9yIjogIiNDNDE2MkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogdHJ1ZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInN1bShyYXRlKHJhYmJpdG1xX2NoYW5uZWxfZ2V0X2Fja190b3RhbFs2MHNdKSAqIG9uKGluc3RhbmNlKSBncm91cF9sZWZ0KHJhYmJpdG1xX2NsdXN0ZXIsIHJhYmJpdG1xX25vZGUpIHJhYmJpdG1xX2lkZW50aXR5X2luZm97cmFiYml0bXFfY2x1c3Rlcj1cIiRyYWJiaXRtcV9jbHVzdGVyXCIsIG5hbWVzcGFjZT1cIiRuYW1lc3BhY2VcIn0pIGJ5KHJhYmJpdG1xX25vZGUpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInt7cmFiYml0bXFfbm9kZX19IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbCiAgICAgICAgewogICAgICAgICAgImNvbG9yTW9kZSI6ICJjcml0aWNhbCIsCiAgICAgICAgICAiZmlsbCI6IHRydWUsCiAgICAgICAgICAibGluZSI6IHRydWUsCiAgICAgICAgICAib3AiOiAiZ3QiLAogICAgICAgICAgInZhbHVlIjogMCwKICAgICAgICAgICJ5YXhpcyI6ICJsZWZ0IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aXRsZSI6ICJQb2xsaW5nIG9wZXJhdGlvbnMgd2l0aCBtYW51YWwgYWNrIC8gcyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMiwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1pbiI6ICIwIiwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgewogICAgICAiY29sbGFwc2VkIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiAxLAogICAgICAgICJ3IjogMjQsCiAgICAgICAgIngiOiAwLAogICAgICAgICJ5IjogNjIKICAgICAgfSwKICAgICAgImlkIjogNTMsCiAgICAgICJwYW5lbHMiOiBbXSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGl0bGUiOiAiUVVFVUVTIiwKICAgICAgInR5cGUiOiAicm93IgogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICB9LAogICAgICAiZGVzY3JpcHRpb24iOiAiVG90YWwgbnVtYmVyIG9mIHF1ZXVlIG1hc3RlcnMgIHBlciBub2RlLiBcblxuVGhpcyBtZXRyaWMgbWFrZXMgaXQgZWFzeSB0byBzZWUgc3ViLW9wdGltYWwgcXVldWUgZGlzdHJpYnV0aW9uIGluIGEgY2x1c3Rlci5cblxuKiBbUXVldWUgTWFzdGVycywgRGF0YSBMb2NhbGl0eV0oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2hhLmh0bWwjbWFzdGVyLW1pZ3JhdGlvbi1kYXRhLWxvY2FsaXR5KVxuKiBbUXVldWVzXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vcXVldWVzLmh0bWwpIiwKICAgICAgImZpZWxkQ29uZmlnIjogewogICAgICAgICJkZWZhdWx0cyI6IHsKICAgICAgICAgICJsaW5rcyI6IFtdCiAgICAgICAgfSwKICAgICAgICAib3ZlcnJpZGVzIjogW10KICAgICAgfSwKICAgICAgImZpbGwiOiAxMCwKICAgICAgImZpbGxHcmFkaWVudCI6IDAsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNSwKICAgICAgICAidyI6IDEyLAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDYzCiAgICAgIH0sCiAgICAgICJoaWRkZW5TZXJpZXMiOiBmYWxzZSwKICAgICAgImlkIjogNTcsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImFsaWduQXNUYWJsZSI6IHRydWUsCiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogdHJ1ZSwKICAgICAgICAibWF4IjogdHJ1ZSwKICAgICAgICAibWluIjogdHJ1ZSwKICAgICAgICAicmlnaHRTaWRlIjogZmFsc2UsCiAgICAgICAgInNob3ciOiBmYWxzZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogdHJ1ZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwgYXMgemVybyIsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJhbGVydFRocmVzaG9sZCI6IHRydWUKICAgICAgfSwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAicG9pbnRyYWRpdXMiOiAyLAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzAoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjNTZBNjRCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8xKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0YyQ0MwQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiMzMjc0RDkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzMoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQTM1MkNDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj80KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGNzgwQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM5NkQ5OEQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzYoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZFRTUyIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj83KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzhBQjhGRiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNDQTk1RTUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzkoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZCMzU3IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IHRydWUsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZXhwciI6ICJyYWJiaXRtcV9xdWV1ZXMgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyLCByYWJiaXRtcV9ub2RlKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9IiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbCI6ICIiLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3tyYWJiaXRtcV9ub2RlfX0iLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFtdLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpdGxlIjogIlRvdGFsIHF1ZXVlcyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMiwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGVjaW1hbHMiOiAtMSwKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogIiIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWluIjogIjAiLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSByYXRlIG9mIHF1ZXVlIGRlY2xhcmF0aW9ucyBwZXJmb3JtZWQgYnkgY2xpZW50cy5cblxuTG93IHN1c3RhaW5lZCB2YWx1ZXMgYWJvdmUgemVybyBhcmUgdG8gYmUgZXhwZWN0ZWQuIEhpZ2ggcmF0ZXMgbWF5IGJlIGluZGljYXRpdmUgb2YgcXVldWUgY2h1cm4gb3IgaGlnaCByYXRlcyBvZiBjb25uZWN0aW9uIHJlY292ZXJ5LiBDb25maXJtIGNvbm5lY3Rpb24gcmVjb3ZlcnkgcmF0ZXMgYnkgdXNpbmcgdGhlIF9Db25uZWN0aW9ucyBvcGVuZWRfIG1ldHJpYy5cblxuKiBbUXVldWVzXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vcXVldWVzLmh0bWwpIiwKICAgICAgImZpZWxkQ29uZmlnIjogewogICAgICAgICJkZWZhdWx0cyI6IHsKICAgICAgICAgICJsaW5rcyI6IFtdCiAgICAgICAgfSwKICAgICAgICAib3ZlcnJpZGVzIjogW10KICAgICAgfSwKICAgICAgImZpbGwiOiAxMCwKICAgICAgImZpbGxHcmFkaWVudCI6IDAsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNSwKICAgICAgICAidyI6IDQsCiAgICAgICAgIngiOiAxMiwKICAgICAgICAieSI6IDYzCiAgICAgIH0sCiAgICAgICJoaWRkZW5TZXJpZXMiOiBmYWxzZSwKICAgICAgImlkIjogNTgsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImFsaWduQXNUYWJsZSI6IHRydWUsCiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogdHJ1ZSwKICAgICAgICAibWF4IjogdHJ1ZSwKICAgICAgICAibWluIjogdHJ1ZSwKICAgICAgICAicmlnaHRTaWRlIjogZmFsc2UsCiAgICAgICAgInNob3ciOiBmYWxzZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogdHJ1ZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwgYXMgemVybyIsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJhbGVydFRocmVzaG9sZCI6IHRydWUKICAgICAgfSwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAicG9pbnRyYWRpdXMiOiAyLAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzAoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjNTZBNjRCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8xKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0YyQ0MwQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiMzMjc0RDkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzMoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQTM1MkNDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj80KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGNzgwQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM5NkQ5OEQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzYoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZFRTUyIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj83KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzhBQjhGRiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNDQTk1RTUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzkoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZCMzU3IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IHRydWUsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZXhwciI6ICJzdW0ocmF0ZShyYWJiaXRtcV9xdWV1ZXNfZGVjbGFyZWRfdG90YWxbNjBzXSkgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyLCByYWJiaXRtcV9ub2RlKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSBieShyYWJiaXRtcV9ub2RlKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnN0YW50IjogZmFsc2UsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7e3JhYmJpdG1xX25vZGV9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogWwogICAgICAgIHsKICAgICAgICAgICJjb2xvck1vZGUiOiAid2FybmluZyIsCiAgICAgICAgICAiZmlsbCI6IHRydWUsCiAgICAgICAgICAibGluZSI6IHRydWUsCiAgICAgICAgICAib3AiOiAiZ3QiLAogICAgICAgICAgInZhbHVlIjogMiwKICAgICAgICAgICJ5YXhpcyI6ICJsZWZ0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImNvbG9yTW9kZSI6ICJjcml0aWNhbCIsCiAgICAgICAgICAiZmlsbCI6IHRydWUsCiAgICAgICAgICAibGluZSI6IHRydWUsCiAgICAgICAgICAib3AiOiAiZ3QiLAogICAgICAgICAgInZhbHVlIjogMTAsCiAgICAgICAgICAieWF4aXMiOiAibGVmdCIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGl0bGUiOiAiUXVldWVzIGRlY2xhcmVkIC8gcyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMiwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1pbiI6ICIwIiwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmF0ZSBvZiBuZXcgcXVldWVzIGNyZWF0ZWQgKGFzIG9wcG9zZWQgdG8gcmVkZWNsYXJhdGlvbnMpLlxuXG5Mb3cgc3VzdGFpbmVkIHZhbHVlcyBhYm92ZSB6ZXJvIGFyZSB0byBiZSBleHBlY3RlZC4gSGlnaCByYXRlcyBtYXkgYmUgaW5kaWNhdGl2ZSBvZiBxdWV1ZSBjaHVybiBvciBoaWdoIHJhdGVzIG9mIGNvbm5lY3Rpb24gcmVjb3ZlcnkuIENvbmZpcm0gY29ubmVjdGlvbiByZWNvdmVyeSByYXRlcyBieSB1c2luZyB0aGUgX0Nvbm5lY3Rpb25zIG9wZW5lZF8gbWV0cmljLlxuXG4qIFtRdWV1ZXNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9xdWV1ZXMuaHRtbCkiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImxpbmtzIjogW10KICAgICAgICB9LAogICAgICAgICJvdmVycmlkZXMiOiBbXQogICAgICB9LAogICAgICAiZmlsbCI6IDEwLAogICAgICAiZmlsbEdyYWRpZW50IjogMCwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA1LAogICAgICAgICJ3IjogNCwKICAgICAgICAieCI6IDE2LAogICAgICAgICJ5IjogNjMKICAgICAgfSwKICAgICAgImhpZGRlblNlcmllcyI6IGZhbHNlLAogICAgICAiaWQiOiA2MCwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYWxpZ25Bc1RhYmxlIjogdHJ1ZSwKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiB0cnVlLAogICAgICAgICJtYXgiOiB0cnVlLAogICAgICAgICJtaW4iOiB0cnVlLAogICAgICAgICJyaWdodFNpZGUiOiBmYWxzZSwKICAgICAgICAic2hvdyI6IGZhbHNlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiB0cnVlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCBhcyB6ZXJvIiwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImFsZXJ0VGhyZXNob2xkIjogdHJ1ZQogICAgICB9LAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJwb2ludHJhZGl1cyI6IDIsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM1NkE2NEIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzEoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRjJDQzBDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8yKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzMyNzREOSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNBMzUyQ0MiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzQoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkY3ODBBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj81KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzk2RDk4RCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkVFNTIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzcoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOEFCOEZGIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj84KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0NBOTVFNSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkIzNTciCiAgICAgICAgfQogICAgICBdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogdHJ1ZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInN1bShyYXRlKHJhYmJpdG1xX3F1ZXVlc19jcmVhdGVkX3RvdGFsWzYwc10pICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlciwgcmFiYml0bXFfbm9kZSkgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkgYnkocmFiYml0bXFfbm9kZSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3tyYWJiaXRtcV9ub2RlfX0iLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiY29sb3JNb2RlIjogIndhcm5pbmciLAogICAgICAgICAgImZpbGwiOiB0cnVlLAogICAgICAgICAgImxpbmUiOiB0cnVlLAogICAgICAgICAgIm9wIjogImd0IiwKICAgICAgICAgICJ2YWx1ZSI6IDIsCiAgICAgICAgICAieWF4aXMiOiAibGVmdCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJjb2xvck1vZGUiOiAiY3JpdGljYWwiLAogICAgICAgICAgImZpbGwiOiB0cnVlLAogICAgICAgICAgImxpbmUiOiB0cnVlLAogICAgICAgICAgIm9wIjogImd0IiwKICAgICAgICAgICJ2YWx1ZSI6IDEwLAogICAgICAgICAgInlheGlzIjogImxlZnQiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpdGxlIjogIlF1ZXVlcyBjcmVhdGVkIC8gcyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMiwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1pbiI6ICIwIiwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmF0ZSBvZiBxdWV1ZXMgZGVsZXRlZC5cblxuTG93IHN1c3RhaW5lZCB2YWx1ZXMgYWJvdmUgemVybyBhcmUgdG8gYmUgZXhwZWN0ZWQuIEhpZ2ggcmF0ZXMgbWF5IGJlIGluZGljYXRpdmUgb2YgcXVldWUgY2h1cm4gb3IgaGlnaCByYXRlcyBvZiBjb25uZWN0aW9uIHJlY292ZXJ5LiBDb25maXJtIGNvbm5lY3Rpb24gcmVjb3ZlcnkgcmF0ZXMgYnkgdXNpbmcgdGhlIF9Db25uZWN0aW9ucyBvcGVuZWRfIG1ldHJpYy5cblxuKiBbUXVldWVzXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vcXVldWVzLmh0bWwpIiwKICAgICAgImZpZWxkQ29uZmlnIjogewogICAgICAgICJkZWZhdWx0cyI6IHsKICAgICAgICAgICJsaW5rcyI6IFtdCiAgICAgICAgfSwKICAgICAgICAib3ZlcnJpZGVzIjogW10KICAgICAgfSwKICAgICAgImZpbGwiOiAxMCwKICAgICAgImZpbGxHcmFkaWVudCI6IDAsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNSwKICAgICAgICAidyI6IDQsCiAgICAgICAgIngiOiAyMCwKICAgICAgICAieSI6IDYzCiAgICAgIH0sCiAgICAgICJoaWRkZW5TZXJpZXMiOiBmYWxzZSwKICAgICAgImlkIjogNTksCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImFsaWduQXNUYWJsZSI6IHRydWUsCiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogdHJ1ZSwKICAgICAgICAibWF4IjogdHJ1ZSwKICAgICAgICAibWluIjogdHJ1ZSwKICAgICAgICAicmlnaHRTaWRlIjogZmFsc2UsCiAgICAgICAgInNob3ciOiBmYWxzZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogdHJ1ZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwgYXMgemVybyIsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJhbGVydFRocmVzaG9sZCI6IHRydWUKICAgICAgfSwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAicG9pbnRyYWRpdXMiOiAyLAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzAoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjNTZBNjRCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8xKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0YyQ0MwQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiMzMjc0RDkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzMoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQTM1MkNDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj80KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGNzgwQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM5NkQ5OEQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzYoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZFRTUyIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj83KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzhBQjhGRiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNDQTk1RTUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzkoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZCMzU3IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IHRydWUsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZXhwciI6ICJzdW0ocmF0ZShyYWJiaXRtcV9xdWV1ZXNfZGVsZXRlZF90b3RhbFs2MHNdKSAqIG9uKGluc3RhbmNlKSBncm91cF9sZWZ0KHJhYmJpdG1xX2NsdXN0ZXIsIHJhYmJpdG1xX25vZGUpIHJhYmJpdG1xX2lkZW50aXR5X2luZm97cmFiYml0bXFfY2x1c3Rlcj1cIiRyYWJiaXRtcV9jbHVzdGVyXCIsIG5hbWVzcGFjZT1cIiRuYW1lc3BhY2VcIn0pIGJ5KHJhYmJpdG1xX25vZGUpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInt7cmFiYml0bXFfbm9kZX19IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbCiAgICAgICAgewogICAgICAgICAgImNvbG9yTW9kZSI6ICJ3YXJuaW5nIiwKICAgICAgICAgICJmaWxsIjogdHJ1ZSwKICAgICAgICAgICJsaW5lIjogdHJ1ZSwKICAgICAgICAgICJvcCI6ICJndCIsCiAgICAgICAgICAidmFsdWUiOiAyLAogICAgICAgICAgInlheGlzIjogImxlZnQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiY29sb3JNb2RlIjogImNyaXRpY2FsIiwKICAgICAgICAgICJmaWxsIjogdHJ1ZSwKICAgICAgICAgICJsaW5lIjogdHJ1ZSwKICAgICAgICAgICJvcCI6ICJndCIsCiAgICAgICAgICAidmFsdWUiOiAxMCwKICAgICAgICAgICJ5YXhpcyI6ICJsZWZ0IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aXRsZSI6ICJRdWV1ZXMgZGVsZXRlZCAvIHMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDIsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiAiIiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtaW4iOiAiMCIsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImNvbGxhcHNlZCI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogMSwKICAgICAgICAidyI6IDI0LAogICAgICAgICJ4IjogMCwKICAgICAgICAieSI6IDY4CiAgICAgIH0sCiAgICAgICJpZCI6IDUxLAogICAgICAicGFuZWxzIjogW10sCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpdGxlIjogIkNIQU5ORUxTIiwKICAgICAgInR5cGUiOiAicm93IgogICAgfSwKICAgIHsKICAgICAgImFsaWFzQ29sb3JzIjoge30sCiAgICAgICJiYXJzIjogZmFsc2UsCiAgICAgICJkYXNoTGVuZ3RoIjogMTAsCiAgICAgICJkYXNoZXMiOiBmYWxzZSwKICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICB9LAogICAgICAiZGVzY3JpcHRpb24iOiAiVG90YWwgbnVtYmVyIG9mIGNoYW5uZWxzIG9uIGFsbCBjdXJyZW50bHkgb3BlbmVkIGNvbm5lY3Rpb25zLlxuXG5JZiB0aGlzIG1ldHJpYyBncm93cyBtb25vdG9uaWNhbGx5IGl0IGlzIGhpZ2hseSBsaWtlbHkgYSBjaGFubmVsIGxlYWsgaW4gb25lIG9mIHRoZSBhcHBsaWNhdGlvbnMuIENvbmZpcm0gY2hhbm5lbCBsZWFrcyBieSB1c2luZyB0aGUgX0NoYW5uZWxzIG9wZW5lZF8gYW5kIF9DaGFubmVscyBjbG9zZWRfIG1ldHJpY3MuXG5cbiogW0NoYW5uZWwgTGVha10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NoYW5uZWxzLmh0bWwjY2hhbm5lbC1sZWFrcylcbiogW0NoYW5uZWxzXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vY2hhbm5lbHMuaHRtbCkiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImxpbmtzIjogW10KICAgICAgICB9LAogICAgICAgICJvdmVycmlkZXMiOiBbXQogICAgICB9LAogICAgICAiZmlsbCI6IDEwLAogICAgICAiZmlsbEdyYWRpZW50IjogMCwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA1LAogICAgICAgICJ3IjogMTIsCiAgICAgICAgIngiOiAwLAogICAgICAgICJ5IjogNjkKICAgICAgfSwKICAgICAgImhpZGRlblNlcmllcyI6IGZhbHNlLAogICAgICAiaWQiOiA1NCwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYWxpZ25Bc1RhYmxlIjogdHJ1ZSwKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiB0cnVlLAogICAgICAgICJtYXgiOiB0cnVlLAogICAgICAgICJtaW4iOiB0cnVlLAogICAgICAgICJyaWdodFNpZGUiOiBmYWxzZSwKICAgICAgICAic2hvdyI6IGZhbHNlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiB0cnVlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCBhcyB6ZXJvIiwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImFsZXJ0VGhyZXNob2xkIjogdHJ1ZQogICAgICB9LAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJwb2ludHJhZGl1cyI6IDIsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM1NkE2NEIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzEoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRjJDQzBDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8yKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzMyNzREOSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNBMzUyQ0MiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzQoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkY3ODBBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj81KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzk2RDk4RCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkVFNTIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzcoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOEFCOEZGIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj84KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0NBOTVFNSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkIzNTciCiAgICAgICAgfQogICAgICBdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogdHJ1ZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInJhYmJpdG1xX2NoYW5uZWxzICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlciwgcmFiYml0bXFfbm9kZSkgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnN0YW50IjogZmFsc2UsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7e3JhYmJpdG1xX25vZGV9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGl0bGUiOiAiVG90YWwgY2hhbm5lbHMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDIsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImRlY2ltYWxzIjogLTEsCiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1pbiI6ICIwIiwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmF0ZSBvZiBuZXcgY2hhbm5lbHMgb3BlbmVkIGJ5IGFwcGxpY2F0aW9ucyBhY3Jvc3MgYWxsIGNvbm5lY3Rpb25zLiBDaGFubmVscyBhcmUgZXhwZWN0ZWQgdG8gYmUgbG9uZy1saXZlZC5cblxuTG93IHN1c3RhaW5lZCB2YWx1ZXMgYWJvdmUgemVybyBhcmUgdG8gYmUgZXhwZWN0ZWQuIEhpZ2ggcmF0ZXMgbWF5IGJlIGluZGljYXRpdmUgb2YgY2hhbm5lbCBjaHVybiBvciBtYXNzIGNvbm5lY3Rpb24gcmVjb3ZlcnkuIENvbmZpcm0gY29ubmVjdGlvbiByZWNvdmVyeSByYXRlcyBieSB1c2luZyB0aGUgX0Nvbm5lY3Rpb25zIG9wZW5lZF8gbWV0cmljLlxuXG4qIFtIaWdoIENoYW5uZWwgQ2h1cm5dKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jaGFubmVscy5odG1sI2hpZ2gtY2hhbm5lbC1jaHVybilcbiogW0NoYW5uZWxzXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vY2hhbm5lbHMuaHRtbCkiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImxpbmtzIjogW10KICAgICAgICB9LAogICAgICAgICJvdmVycmlkZXMiOiBbXQogICAgICB9LAogICAgICAiZmlsbCI6IDEwLAogICAgICAiZmlsbEdyYWRpZW50IjogMCwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA1LAogICAgICAgICJ3IjogNiwKICAgICAgICAieCI6IDEyLAogICAgICAgICJ5IjogNjkKICAgICAgfSwKICAgICAgImhpZGRlblNlcmllcyI6IGZhbHNlLAogICAgICAiaWQiOiA1NSwKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYWxpZ25Bc1RhYmxlIjogdHJ1ZSwKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiB0cnVlLAogICAgICAgICJtYXgiOiB0cnVlLAogICAgICAgICJtaW4iOiB0cnVlLAogICAgICAgICJyaWdodFNpZGUiOiBmYWxzZSwKICAgICAgICAic2hvdyI6IGZhbHNlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiB0cnVlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCBhcyB6ZXJvIiwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImFsZXJ0VGhyZXNob2xkIjogdHJ1ZQogICAgICB9LAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJwb2ludHJhZGl1cyI6IDIsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM1NkE2NEIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzEoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRjJDQzBDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8yKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzMyNzREOSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNBMzUyQ0MiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzQoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkY3ODBBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj81KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzk2RDk4RCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkVFNTIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzcoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOEFCOEZGIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj84KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0NBOTVFNSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkIzNTciCiAgICAgICAgfQogICAgICBdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogdHJ1ZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInN1bShyYXRlKHJhYmJpdG1xX2NoYW5uZWxzX29wZW5lZF90b3RhbFs2MHNdKSAqIG9uKGluc3RhbmNlKSBncm91cF9sZWZ0KHJhYmJpdG1xX2NsdXN0ZXIsIHJhYmJpdG1xX25vZGUpIHJhYmJpdG1xX2lkZW50aXR5X2luZm97cmFiYml0bXFfY2x1c3Rlcj1cIiRyYWJiaXRtcV9jbHVzdGVyXCIsIG5hbWVzcGFjZT1cIiRuYW1lc3BhY2VcIn0pIGJ5KHJhYmJpdG1xX25vZGUpIiwKICAgICAgICAgICJmb3JtYXQiOiAidGltZV9zZXJpZXMiLAogICAgICAgICAgImluc3RhbnQiOiBmYWxzZSwKICAgICAgICAgICJpbnRlcnZhbEZhY3RvciI6IDEsCiAgICAgICAgICAibGVnZW5kRm9ybWF0IjogInt7cmFiYml0bXFfbm9kZX19IiwKICAgICAgICAgICJyZWZJZCI6ICJBIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRocmVzaG9sZHMiOiBbCiAgICAgICAgewogICAgICAgICAgImNvbG9yTW9kZSI6ICJ3YXJuaW5nIiwKICAgICAgICAgICJmaWxsIjogdHJ1ZSwKICAgICAgICAgICJsaW5lIjogdHJ1ZSwKICAgICAgICAgICJvcCI6ICJndCIsCiAgICAgICAgICAidmFsdWUiOiAyLAogICAgICAgICAgInlheGlzIjogImxlZnQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiY29sb3JNb2RlIjogImNyaXRpY2FsIiwKICAgICAgICAgICJmaWxsIjogdHJ1ZSwKICAgICAgICAgICJsaW5lIjogdHJ1ZSwKICAgICAgICAgICJvcCI6ICJndCIsCiAgICAgICAgICAidmFsdWUiOiAxMCwKICAgICAgICAgICJ5YXhpcyI6ICJsZWZ0IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRpbWVSZWdpb25zIjogW10sCiAgICAgICJ0aXRsZSI6ICJDaGFubmVscyBvcGVuZWQgLyBzIiwKICAgICAgInRvb2x0aXAiOiB7CiAgICAgICAgInNoYXJlZCI6IHRydWUsCiAgICAgICAgInNvcnQiOiAyLAogICAgICAgICJ2YWx1ZV90eXBlIjogImluZGl2aWR1YWwiCiAgICAgIH0sCiAgICAgICJ0eXBlIjogImdyYXBoIiwKICAgICAgInhheGlzIjogewogICAgICAgICJtb2RlIjogInRpbWUiLAogICAgICAgICJzaG93IjogdHJ1ZSwKICAgICAgICAidmFsdWVzIjogW10KICAgICAgfSwKICAgICAgInlheGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxhYmVsIjogIiIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAibWluIjogIjAiLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0KICAgICAgXSwKICAgICAgInlheGlzIjogewogICAgICAgICJhbGlnbiI6IGZhbHNlCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJhbGlhc0NvbG9ycyI6IHt9LAogICAgICAiYmFycyI6IGZhbHNlLAogICAgICAiZGFzaExlbmd0aCI6IDEwLAogICAgICAiZGFzaGVzIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSByYXRlIG9mIGNoYW5uZWxzIGNsb3NlZCBieSBhcHBsaWNhdGlvbnMgYWNyb3NzIGFsbCBjb25uZWN0aW9ucy4gQ2hhbm5lbHMgYXJlIGV4cGVjdGVkIHRvIGJlIGxvbmctbGl2ZWQuXG5cbkxvdyBzdXN0YWluZWQgdmFsdWVzIGFib3ZlIHplcm8gYXJlIHRvIGJlIGV4cGVjdGVkLiBIaWdoIHJhdGVzIG1heSBiZSBpbmRpY2F0aXZlIG9mIGNoYW5uZWwgY2h1cm4gb3IgbWFzcyBjb25uZWN0aW9uIHJlY292ZXJ5LiBDb25maXJtIGNvbm5lY3Rpb24gcmVjb3ZlcnkgcmF0ZXMgYnkgdXNpbmcgdGhlIF9Db25uZWN0aW9ucyBvcGVuZWRfIG1ldHJpYy5cblxuKiBbSGlnaCBDaGFubmVsIENodXJuXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vY2hhbm5lbHMuaHRtbCNoaWdoLWNoYW5uZWwtY2h1cm4pXG4qIFtDaGFubmVsc10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NoYW5uZWxzLmh0bWwpIiwKICAgICAgImZpZWxkQ29uZmlnIjogewogICAgICAgICJkZWZhdWx0cyI6IHsKICAgICAgICAgICJsaW5rcyI6IFtdCiAgICAgICAgfSwKICAgICAgICAib3ZlcnJpZGVzIjogW10KICAgICAgfSwKICAgICAgImZpbGwiOiAxMCwKICAgICAgImZpbGxHcmFkaWVudCI6IDAsCiAgICAgICJncmlkUG9zIjogewogICAgICAgICJoIjogNSwKICAgICAgICAidyI6IDYsCiAgICAgICAgIngiOiAxOCwKICAgICAgICAieSI6IDY5CiAgICAgIH0sCiAgICAgICJoaWRkZW5TZXJpZXMiOiBmYWxzZSwKICAgICAgImlkIjogNTYsCiAgICAgICJsZWdlbmQiOiB7CiAgICAgICAgImFsaWduQXNUYWJsZSI6IHRydWUsCiAgICAgICAgImF2ZyI6IGZhbHNlLAogICAgICAgICJjdXJyZW50IjogdHJ1ZSwKICAgICAgICAibWF4IjogdHJ1ZSwKICAgICAgICAibWluIjogdHJ1ZSwKICAgICAgICAicmlnaHRTaWRlIjogZmFsc2UsCiAgICAgICAgInNob3ciOiBmYWxzZSwKICAgICAgICAidG90YWwiOiBmYWxzZSwKICAgICAgICAidmFsdWVzIjogdHJ1ZQogICAgICB9LAogICAgICAibGluZXMiOiB0cnVlLAogICAgICAibGluZXdpZHRoIjogMSwKICAgICAgImxpbmtzIjogW10sCiAgICAgICJudWxsUG9pbnRNb2RlIjogIm51bGwgYXMgemVybyIsCiAgICAgICJvcHRpb25zIjogewogICAgICAgICJhbGVydFRocmVzaG9sZCI6IHRydWUKICAgICAgfSwKICAgICAgInBlcmNlbnRhZ2UiOiBmYWxzZSwKICAgICAgInBsdWdpblZlcnNpb24iOiAiOS4yLjIiLAogICAgICAicG9pbnRyYWRpdXMiOiAyLAogICAgICAicG9pbnRzIjogZmFsc2UsCiAgICAgICJyZW5kZXJlciI6ICJmbG90IiwKICAgICAgInNlcmllc092ZXJyaWRlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzAoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjNTZBNjRCIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8xKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0YyQ0MwQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiMzMjc0RDkiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzMoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQTM1MkNDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj80KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGNzgwQSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM5NkQ5OEQiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzYoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZFRTUyIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj83KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzhBQjhGRiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNDQTk1RTUiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzkoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkZCMzU3IgogICAgICAgIH0KICAgICAgXSwKICAgICAgInNwYWNlTGVuZ3RoIjogMTAsCiAgICAgICJzdGFjayI6IHRydWUsCiAgICAgICJzdGVwcGVkTGluZSI6IGZhbHNlLAogICAgICAidGFyZ2V0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZXhwciI6ICJzdW0ocmF0ZShyYWJiaXRtcV9jaGFubmVsc19jbG9zZWRfdG90YWxbNjBzXSkgKiBvbihpbnN0YW5jZSkgZ3JvdXBfbGVmdChyYWJiaXRtcV9jbHVzdGVyLCByYWJiaXRtcV9ub2RlKSByYWJiaXRtcV9pZGVudGl0eV9pbmZve3JhYmJpdG1xX2NsdXN0ZXI9XCIkcmFiYml0bXFfY2x1c3RlclwiLCBuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9KSBieShyYWJiaXRtcV9ub2RlKSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnN0YW50IjogZmFsc2UsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7e3JhYmJpdG1xX25vZGV9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogWwogICAgICAgIHsKICAgICAgICAgICJjb2xvck1vZGUiOiAid2FybmluZyIsCiAgICAgICAgICAiZmlsbCI6IHRydWUsCiAgICAgICAgICAibGluZSI6IHRydWUsCiAgICAgICAgICAib3AiOiAiZ3QiLAogICAgICAgICAgInZhbHVlIjogMiwKICAgICAgICAgICJ5YXhpcyI6ICJsZWZ0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImNvbG9yTW9kZSI6ICJjcml0aWNhbCIsCiAgICAgICAgICAiZmlsbCI6IHRydWUsCiAgICAgICAgICAibGluZSI6IHRydWUsCiAgICAgICAgICAib3AiOiAiZ3QiLAogICAgICAgICAgInZhbHVlIjogMTAsCiAgICAgICAgICAieWF4aXMiOiAibGVmdCIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGl0bGUiOiAiQ2hhbm5lbHMgY2xvc2VkIC8gcyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMiwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1pbiI6ICIwIiwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgewogICAgICAiY29sbGFwc2VkIjogZmFsc2UsCiAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICJ1aWQiOiAicHJvbWV0aGV1cyIKICAgICAgfSwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiAxLAogICAgICAgICJ3IjogMjQsCiAgICAgICAgIngiOiAwLAogICAgICAgICJ5IjogNzQKICAgICAgfSwKICAgICAgImlkIjogNDYsCiAgICAgICJwYW5lbHMiOiBbXSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGl0bGUiOiAiQ09OTkVDVElPTlMiLAogICAgICAidHlwZSI6ICJyb3ciCiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUb3RhbCBudW1iZXIgb2YgY2xpZW50IGNvbm5lY3Rpb25zLlxuXG5JZiB0aGlzIG1ldHJpYyBncm93cyBtb25vdG9uaWNhbGx5IGl0IGlzIGhpZ2hseSBsaWtlbHkgYSBjb25uZWN0aW9uIGxlYWsgaW4gb25lIG9mIHRoZSBhcHBsaWNhdGlvbnMuIENvbmZpcm0gY29ubmVjdGlvbiBsZWFrcyBieSB1c2luZyB0aGUgX0Nvbm5lY3Rpb25zIG9wZW5lZF8gYW5kIF9Db25uZWN0aW9ucyBjbG9zZWRfIG1ldHJpY3MuXG5cbiogW0Nvbm5lY3Rpb24gTGVha10oaHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2Nvbm5lY3Rpb25zLmh0bWwjbW9uaXRvcmluZylcbiogW0Nvbm5lY3Rpb25zXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vY29ubmVjdGlvbnMuaHRtbCkiLAogICAgICAiZmllbGRDb25maWciOiB7CiAgICAgICAgImRlZmF1bHRzIjogewogICAgICAgICAgImxpbmtzIjogW10KICAgICAgICB9LAogICAgICAgICJvdmVycmlkZXMiOiBbXQogICAgICB9LAogICAgICAiZmlsbCI6IDEwLAogICAgICAiZmlsbEdyYWRpZW50IjogMCwKICAgICAgImdyaWRQb3MiOiB7CiAgICAgICAgImgiOiA1LAogICAgICAgICJ3IjogMTIsCiAgICAgICAgIngiOiAwLAogICAgICAgICJ5IjogNzUKICAgICAgfSwKICAgICAgImhpZGRlblNlcmllcyI6IGZhbHNlLAogICAgICAiaWQiOiA0NywKICAgICAgImxlZ2VuZCI6IHsKICAgICAgICAiYWxpZ25Bc1RhYmxlIjogdHJ1ZSwKICAgICAgICAiYXZnIjogZmFsc2UsCiAgICAgICAgImN1cnJlbnQiOiB0cnVlLAogICAgICAgICJtYXgiOiB0cnVlLAogICAgICAgICJtaW4iOiB0cnVlLAogICAgICAgICJyaWdodFNpZGUiOiBmYWxzZSwKICAgICAgICAic2hvdyI6IGZhbHNlLAogICAgICAgICJ0b3RhbCI6IGZhbHNlLAogICAgICAgICJ2YWx1ZXMiOiB0cnVlCiAgICAgIH0sCiAgICAgICJsaW5lcyI6IHRydWUsCiAgICAgICJsaW5ld2lkdGgiOiAxLAogICAgICAibGlua3MiOiBbXSwKICAgICAgIm51bGxQb2ludE1vZGUiOiAibnVsbCBhcyB6ZXJvIiwKICAgICAgIm9wdGlvbnMiOiB7CiAgICAgICAgImFsZXJ0VGhyZXNob2xkIjogdHJ1ZQogICAgICB9LAogICAgICAicGVyY2VudGFnZSI6IGZhbHNlLAogICAgICAicGx1Z2luVmVyc2lvbiI6ICI5LjIuMiIsCiAgICAgICJwb2ludHJhZGl1cyI6IDIsCiAgICAgICJwb2ludHMiOiBmYWxzZSwKICAgICAgInJlbmRlcmVyIjogImZsb3QiLAogICAgICAic2VyaWVzT3ZlcnJpZGVzIjogWwogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM1NkE2NEIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzEoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRjJDQzBDIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8yKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzMyNzREOSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNBMzUyQ0MiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzQoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjRkY3ODBBIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj81KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzk2RDk4RCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NihcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkVFNTIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzcoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOEFCOEZGIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj84KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0NBOTVFNSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/OShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRkIzNTciCiAgICAgICAgfQogICAgICBdLAogICAgICAic3BhY2VMZW5ndGgiOiAxMCwKICAgICAgInN0YWNrIjogdHJ1ZSwKICAgICAgInN0ZXBwZWRMaW5lIjogZmFsc2UsCiAgICAgICJ0YXJnZXRzIjogWwogICAgICAgIHsKICAgICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAgICAgInVpZCI6ICJwcm9tZXRoZXVzIgogICAgICAgICAgfSwKICAgICAgICAgICJleHByIjogInJhYmJpdG1xX2Nvbm5lY3Rpb25zICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlciwgcmFiYml0bXFfbm9kZSkgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSIsCiAgICAgICAgICAiZm9ybWF0IjogInRpbWVfc2VyaWVzIiwKICAgICAgICAgICJpbnN0YW50IjogZmFsc2UsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7e3JhYmJpdG1xX25vZGV9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogW10sCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGl0bGUiOiAiVG90YWwgY29ubmVjdGlvbnMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDIsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImRlY2ltYWxzIjogLTEsCiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1pbiI6ICIwIiwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmF0ZSBvZiBuZXcgY29ubmVjdGlvbnMgb3BlbmVkIGJ5IGNsaWVudHMuIENvbm5lY3Rpb25zIGFyZSBleHBlY3RlZCB0byBiZSBsb25nLWxpdmVkLlxuXG5Mb3cgc3VzdGFpbmVkIHZhbHVlcyBhYm92ZSB6ZXJvIGFyZSB0byBiZSBleHBlY3RlZC4gSGlnaCByYXRlcyBtYXkgYmUgaW5kaWNhdGl2ZSBvZiBjb25uZWN0aW9uIGNodXJuIG9yIG1hc3MgY29ubmVjdGlvbiByZWNvdmVyeS5cblxuKiBbQ29ubmVjdGlvbiBMZWFrXShodHRwczovL3d3dy5yYWJiaXRtcS5jb20vY29ubmVjdGlvbnMuaHRtbCNtb25pdG9yaW5nKVxuKiBbQ29ubmVjdGlvbnNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25uZWN0aW9ucy5odG1sKSIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAibGlua3MiOiBbXQogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJmaWxsIjogMTAsCiAgICAgICJmaWxsR3JhZGllbnQiOiAwLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDUsCiAgICAgICAgInciOiA2LAogICAgICAgICJ4IjogMTIsCiAgICAgICAgInkiOiA3NQogICAgICB9LAogICAgICAiaGlkZGVuU2VyaWVzIjogZmFsc2UsCiAgICAgICJpZCI6IDQ4LAogICAgICAibGVnZW5kIjogewogICAgICAgICJhbGlnbkFzVGFibGUiOiB0cnVlLAogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IHRydWUsCiAgICAgICAgIm1heCI6IHRydWUsCiAgICAgICAgIm1pbiI6IHRydWUsCiAgICAgICAgInJpZ2h0U2lkZSI6IGZhbHNlLAogICAgICAgICJzaG93IjogZmFsc2UsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IHRydWUKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIGFzIHplcm8iLAogICAgICAib3B0aW9ucyI6IHsKICAgICAgICAiYWxlcnRUaHJlc2hvbGQiOiB0cnVlCiAgICAgIH0sCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwbHVnaW5WZXJzaW9uIjogIjkuMi4yIiwKICAgICAgInBvaW50cmFkaXVzIjogMiwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8wKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzU2QTY0QiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGMkNDMEMiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzIoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjMzI3NEQ5IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8zKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0EzNTJDQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRjc4MEEiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzUoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOTZEOThEIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj82KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGRUU1MiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM4QUI4RkYiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzgoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQ0E5NUU1IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj85KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGQjM1NyIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiB0cnVlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAic3VtKHJhdGUocmFiYml0bXFfY29ubmVjdGlvbnNfb3BlbmVkX3RvdGFsWzYwc10pICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlciwgcmFiYml0bXFfbm9kZSkgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkgYnkocmFiYml0bXFfbm9kZSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsIjogIiIsCiAgICAgICAgICAiaW50ZXJ2YWxGYWN0b3IiOiAxLAogICAgICAgICAgImxlZ2VuZEZvcm1hdCI6ICJ7e3JhYmJpdG1xX25vZGV9fSIsCiAgICAgICAgICAicmVmSWQiOiAiQSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aHJlc2hvbGRzIjogWwogICAgICAgIHsKICAgICAgICAgICJjb2xvck1vZGUiOiAid2FybmluZyIsCiAgICAgICAgICAiZmlsbCI6IHRydWUsCiAgICAgICAgICAibGluZSI6IHRydWUsCiAgICAgICAgICAib3AiOiAiZ3QiLAogICAgICAgICAgInZhbHVlIjogMiwKICAgICAgICAgICJ5YXhpcyI6ICJsZWZ0IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImNvbG9yTW9kZSI6ICJjcml0aWNhbCIsCiAgICAgICAgICAiZmlsbCI6IHRydWUsCiAgICAgICAgICAibGluZSI6IHRydWUsCiAgICAgICAgICAib3AiOiAiZ3QiLAogICAgICAgICAgInZhbHVlIjogMTAsCiAgICAgICAgICAieWF4aXMiOiAibGVmdCIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0aW1lUmVnaW9ucyI6IFtdLAogICAgICAidGl0bGUiOiAiQ29ubmVjdGlvbnMgb3BlbmVkIC8gcyIsCiAgICAgICJ0b29sdGlwIjogewogICAgICAgICJzaGFyZWQiOiB0cnVlLAogICAgICAgICJzb3J0IjogMiwKICAgICAgICAidmFsdWVfdHlwZSI6ICJpbmRpdmlkdWFsIgogICAgICB9LAogICAgICAidHlwZSI6ICJncmFwaCIsCiAgICAgICJ4YXhpcyI6IHsKICAgICAgICAibW9kZSI6ICJ0aW1lIiwKICAgICAgICAic2hvdyI6IHRydWUsCiAgICAgICAgInZhbHVlcyI6IFtdCiAgICAgIH0sCiAgICAgICJ5YXhlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiZm9ybWF0IjogInNob3J0IiwKICAgICAgICAgICJsYWJlbCI6ICIiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgIm1pbiI6ICIwIiwKICAgICAgICAgICJzaG93IjogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibG9nQmFzZSI6IDEsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ5YXhpcyI6IHsKICAgICAgICAiYWxpZ24iOiBmYWxzZQogICAgICB9CiAgICB9LAogICAgewogICAgICAiYWxpYXNDb2xvcnMiOiB7fSwKICAgICAgImJhcnMiOiBmYWxzZSwKICAgICAgImRhc2hMZW5ndGgiOiAxMCwKICAgICAgImRhc2hlcyI6IGZhbHNlLAogICAgICAiZGF0YXNvdXJjZSI6IHsKICAgICAgICAidHlwZSI6ICJwcm9tZXRoZXVzIiwKICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgIH0sCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmF0ZSBvZiBjb25uZWN0aW9ucyBjbG9zZWQuIENvbm5lY3Rpb25zIGFyZSBleHBlY3RlZCB0byBiZSBsb25nLWxpdmVkLlxuXG5Mb3cgc3VzdGFpbmVkIHZhbHVlcyBhYm92ZSB6ZXJvIGFyZSB0byBiZSBleHBlY3RlZC4gSGlnaCByYXRlcyBtYXkgYmUgaW5kaWNhdGl2ZSBvZiBjb25uZWN0aW9uIGNodXJuIG9yIG1hc3MgY29ubmVjdGlvbiByZWNvdmVyeS5cblxuKiBbQ29ubmVjdGlvbnNdKGh0dHBzOi8vd3d3LnJhYmJpdG1xLmNvbS9jb25uZWN0aW9ucy5odG1sKSIsCiAgICAgICJmaWVsZENvbmZpZyI6IHsKICAgICAgICAiZGVmYXVsdHMiOiB7CiAgICAgICAgICAibGlua3MiOiBbXQogICAgICAgIH0sCiAgICAgICAgIm92ZXJyaWRlcyI6IFtdCiAgICAgIH0sCiAgICAgICJmaWxsIjogMTAsCiAgICAgICJmaWxsR3JhZGllbnQiOiAwLAogICAgICAiZ3JpZFBvcyI6IHsKICAgICAgICAiaCI6IDUsCiAgICAgICAgInciOiA2LAogICAgICAgICJ4IjogMTgsCiAgICAgICAgInkiOiA3NQogICAgICB9LAogICAgICAiaGlkZGVuU2VyaWVzIjogZmFsc2UsCiAgICAgICJpZCI6IDQ5LAogICAgICAibGVnZW5kIjogewogICAgICAgICJhbGlnbkFzVGFibGUiOiB0cnVlLAogICAgICAgICJhdmciOiBmYWxzZSwKICAgICAgICAiY3VycmVudCI6IHRydWUsCiAgICAgICAgIm1heCI6IHRydWUsCiAgICAgICAgIm1pbiI6IHRydWUsCiAgICAgICAgInJpZ2h0U2lkZSI6IGZhbHNlLAogICAgICAgICJzaG93IjogZmFsc2UsCiAgICAgICAgInRvdGFsIjogZmFsc2UsCiAgICAgICAgInZhbHVlcyI6IHRydWUKICAgICAgfSwKICAgICAgImxpbmVzIjogdHJ1ZSwKICAgICAgImxpbmV3aWR0aCI6IDEsCiAgICAgICJsaW5rcyI6IFtdLAogICAgICAibnVsbFBvaW50TW9kZSI6ICJudWxsIGFzIHplcm8iLAogICAgICAib3B0aW9ucyI6IHsKICAgICAgICAiYWxlcnRUaHJlc2hvbGQiOiB0cnVlCiAgICAgIH0sCiAgICAgICJwZXJjZW50YWdlIjogZmFsc2UsCiAgICAgICJwbHVnaW5WZXJzaW9uIjogIjkuMi4yIiwKICAgICAgInBvaW50cmFkaXVzIjogMiwKICAgICAgInBvaW50cyI6IGZhbHNlLAogICAgICAicmVuZGVyZXIiOiAiZmxvdCIsCiAgICAgICJzZXJpZXNPdmVycmlkZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8wKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiIzU2QTY0QiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/MShcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGMkNDMEMiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzIoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjMzI3NEQ5IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj8zKFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0EzNTJDQyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NChcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiNGRjc4MEEiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzUoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjOTZEOThEIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj82KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGRUU1MiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJhbGlhcyI6ICIvXnJhYmJpdEBbYS16QS1aXFwuXFwtXSo/NyhcXGJ8XFwuKS8iLAogICAgICAgICAgImNvbG9yIjogIiM4QUI4RkYiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiYWxpYXMiOiAiL15yYWJiaXRAW2EtekEtWlxcLlxcLV0qPzgoXFxifFxcLikvIiwKICAgICAgICAgICJjb2xvciI6ICIjQ0E5NUU1IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgImFsaWFzIjogIi9ecmFiYml0QFthLXpBLVpcXC5cXC1dKj85KFxcYnxcXC4pLyIsCiAgICAgICAgICAiY29sb3IiOiAiI0ZGQjM1NyIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJzcGFjZUxlbmd0aCI6IDEwLAogICAgICAic3RhY2siOiB0cnVlLAogICAgICAic3RlcHBlZExpbmUiOiBmYWxzZSwKICAgICAgInRhcmdldHMiOiBbCiAgICAgICAgewogICAgICAgICAgImRhdGFzb3VyY2UiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInByb21ldGhldXMiLAogICAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgICB9LAogICAgICAgICAgImV4cHIiOiAic3VtKHJhdGUocmFiYml0bXFfY29ubmVjdGlvbnNfY2xvc2VkX3RvdGFsWzYwc10pICogb24oaW5zdGFuY2UpIGdyb3VwX2xlZnQocmFiYml0bXFfY2x1c3RlciwgcmFiYml0bXFfbm9kZSkgcmFiYml0bXFfaWRlbnRpdHlfaW5mb3tyYWJiaXRtcV9jbHVzdGVyPVwiJHJhYmJpdG1xX2NsdXN0ZXJcIiwgbmFtZXNwYWNlPVwiJG5hbWVzcGFjZVwifSkgYnkocmFiYml0bXFfbm9kZSkiLAogICAgICAgICAgImZvcm1hdCI6ICJ0aW1lX3NlcmllcyIsCiAgICAgICAgICAiaW5zdGFudCI6IGZhbHNlLAogICAgICAgICAgImludGVydmFsRmFjdG9yIjogMSwKICAgICAgICAgICJsZWdlbmRGb3JtYXQiOiAie3tyYWJiaXRtcV9ub2RlfX0iLAogICAgICAgICAgInJlZklkIjogIkEiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGhyZXNob2xkcyI6IFsKICAgICAgICB7CiAgICAgICAgICAiY29sb3JNb2RlIjogIndhcm5pbmciLAogICAgICAgICAgImZpbGwiOiB0cnVlLAogICAgICAgICAgImxpbmUiOiB0cnVlLAogICAgICAgICAgIm9wIjogImd0IiwKICAgICAgICAgICJ2YWx1ZSI6IDIsCiAgICAgICAgICAieWF4aXMiOiAibGVmdCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJjb2xvck1vZGUiOiAiY3JpdGljYWwiLAogICAgICAgICAgImZpbGwiOiB0cnVlLAogICAgICAgICAgImxpbmUiOiB0cnVlLAogICAgICAgICAgIm9wIjogImd0IiwKICAgICAgICAgICJ2YWx1ZSI6IDEwLAogICAgICAgICAgInlheGlzIjogImxlZnQiCiAgICAgICAgfQogICAgICBdLAogICAgICAidGltZVJlZ2lvbnMiOiBbXSwKICAgICAgInRpdGxlIjogIkNvbm5lY3Rpb25zIGNsb3NlZCAvIHMiLAogICAgICAidG9vbHRpcCI6IHsKICAgICAgICAic2hhcmVkIjogdHJ1ZSwKICAgICAgICAic29ydCI6IDIsCiAgICAgICAgInZhbHVlX3R5cGUiOiAiaW5kaXZpZHVhbCIKICAgICAgfSwKICAgICAgInR5cGUiOiAiZ3JhcGgiLAogICAgICAieGF4aXMiOiB7CiAgICAgICAgIm1vZGUiOiAidGltZSIsCiAgICAgICAgInNob3ciOiB0cnVlLAogICAgICAgICJ2YWx1ZXMiOiBbXQogICAgICB9LAogICAgICAieWF4ZXMiOiBbCiAgICAgICAgewogICAgICAgICAgImZvcm1hdCI6ICJzaG9ydCIsCiAgICAgICAgICAibGFiZWwiOiAiIiwKICAgICAgICAgICJsb2dCYXNlIjogMSwKICAgICAgICAgICJtaW4iOiAiMCIsCiAgICAgICAgICAic2hvdyI6IHRydWUKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJmb3JtYXQiOiAic2hvcnQiLAogICAgICAgICAgImxvZ0Jhc2UiOiAxLAogICAgICAgICAgInNob3ciOiB0cnVlCiAgICAgICAgfQogICAgICBdLAogICAgICAieWF4aXMiOiB7CiAgICAgICAgImFsaWduIjogZmFsc2UKICAgICAgfQogICAgfQogIF0sCiAgInJlZnJlc2giOiAiMTVzIiwKICAic2NoZW1hVmVyc2lvbiI6IDM3LAogICJzdHlsZSI6ICJkYXJrIiwKICAidGFncyI6IFsKICAgICJyYWJiaXRtcS1wcm9tZXRoZXVzIgogIF0sCiAgInRlbXBsYXRpbmciOiB7CiAgICAibGlzdCI6IFsKICAgICAgewogICAgICAgICJjdXJyZW50IjogewogICAgICAgICAgInNlbGVjdGVkIjogZmFsc2UsCiAgICAgICAgICAidGV4dCI6ICJkZWZhdWx0IiwKICAgICAgICAgICJ2YWx1ZSI6ICJkZWZhdWx0IgogICAgICAgIH0sCiAgICAgICAgImRhdGFzb3VyY2UiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgImhpZGUiOiAyLAogICAgICAgICJpbmNsdWRlQWxsIjogZmFsc2UsCiAgICAgICAgImxhYmVsIjogImRhdGFzb3VyY2UiLAogICAgICAgICJtdWx0aSI6IGZhbHNlLAogICAgICAgICJuYW1lIjogIkRTX1BST01FVEhFVVMiLAogICAgICAgICJvcHRpb25zIjogW10sCiAgICAgICAgInF1ZXJ5IjogInByb21ldGhldXMiLAogICAgICAgICJyZWZyZXNoIjogMSwKICAgICAgICAicmVnZXgiOiAiIiwKICAgICAgICAic2tpcFVybFN5bmMiOiBmYWxzZSwKICAgICAgICAidHlwZSI6ICJkYXRhc291cmNlIgogICAgICB9LAogICAgICB7CiAgICAgICAgImN1cnJlbnQiOiB7CiAgICAgICAgICAic2VsZWN0ZWQiOiBmYWxzZSwKICAgICAgICAgICJ0ZXh0IjogImluZnJhc3RydWN0dXJlIiwKICAgICAgICAgICJ2YWx1ZSI6ICJpbmZyYXN0cnVjdHVyZSIKICAgICAgICB9LAogICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgfSwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJsYWJlbF92YWx1ZXMocmFiYml0bXFfaWRlbnRpdHlfaW5mbywgbmFtZXNwYWNlKSIsCiAgICAgICAgImhpZGUiOiAwLAogICAgICAgICJpbmNsdWRlQWxsIjogZmFsc2UsCiAgICAgICAgImxhYmVsIjogIk5hbWVzcGFjZSIsCiAgICAgICAgIm11bHRpIjogZmFsc2UsCiAgICAgICAgIm5hbWUiOiAibmFtZXNwYWNlIiwKICAgICAgICAib3B0aW9ucyI6IFtdLAogICAgICAgICJxdWVyeSI6IHsKICAgICAgICAgICJxdWVyeSI6ICJsYWJlbF92YWx1ZXMocmFiYml0bXFfaWRlbnRpdHlfaW5mbywgbmFtZXNwYWNlKSIsCiAgICAgICAgICAicmVmSWQiOiAiUHJvbWV0aGV1cy1uYW1lc3BhY2UtVmFyaWFibGUtUXVlcnkiCiAgICAgICAgfSwKICAgICAgICAicmVmcmVzaCI6IDIsCiAgICAgICAgInJlZ2V4IjogIiIsCiAgICAgICAgInNraXBVcmxTeW5jIjogZmFsc2UsCiAgICAgICAgInNvcnQiOiAxLAogICAgICAgICJ0YWdWYWx1ZXNRdWVyeSI6ICIiLAogICAgICAgICJ0YWdzUXVlcnkiOiAiIiwKICAgICAgICAidHlwZSI6ICJxdWVyeSIsCiAgICAgICAgInVzZVRhZ3MiOiBmYWxzZQogICAgICB9LAogICAgICB7CiAgICAgICAgImN1cnJlbnQiOiB7CiAgICAgICAgICAic2VsZWN0ZWQiOiBmYWxzZSwKICAgICAgICAgICJ0ZXh0IjogInJhYmJpdEByYWJiaXRtcS0wLnJhYmJpdG1xLWhlYWRsZXNzLmluZnJhc3RydWN0dXJlLnN2Yy5jbHVzdGVyLmxvY2FsIiwKICAgICAgICAgICJ2YWx1ZSI6ICJyYWJiaXRAcmFiYml0bXEtMC5yYWJiaXRtcS1oZWFkbGVzcy5pbmZyYXN0cnVjdHVyZS5zdmMuY2x1c3Rlci5sb2NhbCIKICAgICAgICB9LAogICAgICAgICJkYXRhc291cmNlIjogewogICAgICAgICAgInR5cGUiOiAicHJvbWV0aGV1cyIsCiAgICAgICAgICAidWlkIjogInByb21ldGhldXMiCiAgICAgICAgfSwKICAgICAgICAiZGVmaW5pdGlvbiI6ICJsYWJlbF92YWx1ZXMocmFiYml0bXFfaWRlbnRpdHlfaW5mb3tuYW1lc3BhY2U9XCIkbmFtZXNwYWNlXCJ9LCByYWJiaXRtcV9jbHVzdGVyKSIsCiAgICAgICAgImhpZGUiOiAwLAogICAgICAgICJpbmNsdWRlQWxsIjogZmFsc2UsCiAgICAgICAgImxhYmVsIjogIlJhYmJpdE1RIENsdXN0ZXIiLAogICAgICAgICJtdWx0aSI6IGZhbHNlLAogICAgICAgICJuYW1lIjogInJhYmJpdG1xX2NsdXN0ZXIiLAogICAgICAgICJvcHRpb25zIjogW10sCiAgICAgICAgInF1ZXJ5IjogewogICAgICAgICAgInF1ZXJ5IjogImxhYmVsX3ZhbHVlcyhyYWJiaXRtcV9pZGVudGl0eV9pbmZve25hbWVzcGFjZT1cIiRuYW1lc3BhY2VcIn0sIHJhYmJpdG1xX2NsdXN0ZXIpIiwKICAgICAgICAgICJyZWZJZCI6ICJQcm9tZXRoZXVzLXJhYmJpdG1xX2NsdXN0ZXItVmFyaWFibGUtUXVlcnkiCiAgICAgICAgfSwKICAgICAgICAicmVmcmVzaCI6IDIsCiAgICAgICAgInJlZ2V4IjogIiIsCiAgICAgICAgInNraXBVcmxTeW5jIjogZmFsc2UsCiAgICAgICAgInNvcnQiOiAxLAogICAgICAgICJ0YWdWYWx1ZXNRdWVyeSI6ICIiLAogICAgICAgICJ0YWdzUXVlcnkiOiAiIiwKICAgICAgICAidHlwZSI6ICJxdWVyeSIsCiAgICAgICAgInVzZVRhZ3MiOiBmYWxzZQogICAgICB9CiAgICBdCiAgfSwKICAidGltZSI6IHsKICAgICJmcm9tIjogIm5vdy0xNW0iLAogICAgInRvIjogIm5vdyIKICB9LAogICJ0aW1lcGlja2VyIjogewogICAgInJlZnJlc2hfaW50ZXJ2YWxzIjogWwogICAgICAiMTVzIiwKICAgICAgIjMwcyIsCiAgICAgICIxbSIsCiAgICAgICI1bSIsCiAgICAgICIxMG0iCiAgICBdLAogICAgInRpbWVfb3B0aW9ucyI6IFsKICAgICAgIjVtIiwKICAgICAgIjE1bSIsCiAgICAgICIxaCIsCiAgICAgICI2aCIsCiAgICAgICIxMmgiLAogICAgICAiMjRoIiwKICAgICAgIjJkIiwKICAgICAgIjdkIiwKICAgICAgIjMwZCIKICAgIF0KICB9LAogICJ0aW1lem9uZSI6ICIiLAogICJ0aXRsZSI6ICJSYWJiaXRNUS1PdmVydmlldyIsCiAgInVpZCI6ICJLbjV4bS1nWmsiLAogICJ2ZXJzaW9uIjogMiwKICAid2Vla1N0YXJ0IjogIiIKfQ==